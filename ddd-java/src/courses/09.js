export default {
  title:
    "09 Utilizando objetos Request y Response para comunicarnos con el Application Service",
  videoId: "PGD8SOWSSnY",
  notes: [
    { type: "subtitle", content: "Utilizando Request/Response para comunicarnos con los AS" },
    {
      type: "text",
      content: "Ya hemos iniciado un planteamiento de desarrollo Outside-in, establecido m√≠nimamente nuestra estrategia de testing e incluso hemos extra√≠do el Application Service fuera del Controller, por lo que ya va siendo hora de llevar a cabo cierto refactor ‚ôªÔ∏è para comenzar a modelar nuestro dominio a trav√©s de las clases Request/Response"
    },
    {
      type: "text",
      content: "Estas clases no tienen que ver con las Requests y Responses del protocolo HTTP, sino que se tratan de DTOs (Tambi√©n conocidos como POJOs en el ecosistema Java) que nos permitir√°n dar el paso para desacoplar los Controladores de los Servicios de Aplicaci√≥n"
    },
    {
      type: "text",
      content: "Hasta ahora, el procedimiento que llev√°bamos a cabo era invocar al caso de uso desde el controller pas√°ndole directamente los atributos, sin embargo a la larga esto nos supondr√° un problema tanto al comenzar a utilizar Value Objects que encapsulen cierta l√≥gica de Dominio (¬°Chirr√≠a instanciar estos elementos desde la capa de infraestructura!) como cuando queramos migrar a CQRS"
    },
    {
      type: "text",
      content: "Aunque ya tenemos un objeto Request dentro del propio controller, no creemos que tenga sentido mantener su uso ya que el hecho de tener que pasarle los atributos a trav√©s de los setters supone siempre un riesgo de que olvidemos pasarle alguno de ellos y nos genere un error (es mucho m√°s recomendable usar un objeto que nos fuerce a pasarle todos los campos en el constructor), adem√°s queremos poder reutilizar el caso de uso tanto en diferentes protocolos de comunicaci√≥n como en Eventos de Dominio, por lo que nos interesa a√±adir esta 'complejidad' y evitar cualquier dependencia con la capa de infraestructura (como tambi√©n supon√≠a utilizar el objeto Request de Spring)"
    },
    {
      type: "text",
      content: "As√≠ pues crearemos nuestro propio CreateCourseRequest al mismo nivel de directorio que el caso de uso y con los mismos par√°metros que el agregado Course. Ser√° ahora esta request lo que reciba el m√©todo create() del caso de uso por par√°metro, de donde extraer√° los valores y seguir√° el flujo tal y como hab√≠amos visto hasta ahora"
    },
    {
      type: "text",
      content: "CodelyTV Tip ‚òùÔ∏è: Estamos omitiendo el prefijo 'get' en los getters del DTO puesto que asumimos que los atributos de clase ser√°n siempre privados (obligando a que las mutaciones de estado se den s√≥lo dentro de la propia clase) y no habr√° por tanto confusi√≥n respecto a si se llama al m√©todo o al propio atributo"
    },
    {
      type: "text",
      content: "Este refactor implicar√° tambi√©n modificar nuestro test unitario del caso de uso para que el caso de uso reciba tambi√©n una instancia de nuestro objeto request, los tests de aceptaci√≥n, por su parte, no sufrir√°n ning√∫n cambio ya que el protocolo de comunicaci√≥n (con el cual interaccionamos en este test) no se ve afectado ü§∑üèº‚Äç‚ôÇÔ∏è"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üÜî UUIDs como Identificadores!"
    }
  ],
};
