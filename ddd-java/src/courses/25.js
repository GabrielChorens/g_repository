export default {
  title: "25 Publicaci√≥n de eventos de dominio Curso creado",
  videoId: "vAV_OIhks3k",
  notes: [
    { type: "subtitle", content: "Publicaci√≥n de eventos de dominio: Curso creado" },
    {
      type: "text",
      content: "En esta lecci√≥n vamos a introducir el concepto de Eventos de Dominio en nuestro sistema, lo cual nos permitir√° escuchar y reaccionar a las acciones que se produzcan en √©ste. El primer paso ser√° definir c√≥mo se llevar√° a cabo la publicaci√≥n de eventos, independientemente de la implementaci√≥n que finalmente utilicemos"
    },
    {
      type: "text",
      content: "Si estos conceptos a√∫n os bailan o no ten√©is del todo claro os recomendamos encarecidamente que vay√°is primero al curso de DDD Aplicado"
    },
    {
      type: "text", 
      content: "Lo primero que debemos tener en consideraci√≥n es el concepto de EventBus, esta ser√° la pieza encargada de publicar los eventos en alg√∫n lugar desde el cual se podr√°n consumir posteriormente. Para nosotros este EventBus de momento no es m√°s que una interface propia con un m√©todo publish() el cual espera recibir una lista de eventos de Dominio"
    },
    { type: "subtitle", content: "Clase Course:" },
    {
      type: "code",
      content: "public final class Course extends AggregateRoot {\n    // ...\n\n    public Course(CourseId id, CourseName name, CourseDuration duration) {\n        this.id       = id;\n        this.name     = name;\n        this.duration = duration;\n    }\n    public Course(CourseId id, CourseName name, CourseDuration duration) {\n        id       = null;\n        name     = null;\n        duration = null;\n    }\n\n    public static Course create(CourseId id, CourseName name, CourseDuration duration) {\n        Course course = new Course(id, name, duration);\n\n        course.record(new CourseCreatedDomainEvent(id.value(), name.value(), duration.value()));\n\n        return course;\n    }\n    // ...\n}"
    },
    {
      type: "text",
      content: "Dentro del m√©todo de nuestro caso de uso podemos ver como en lugar de hacer un 'new' de Course, estamos llamando al named constructor create(). El sentido de este cambio es que adem√°s de crear una instancia v√°lida, tambi√©n registraremos el evento de dominio que acaba de producirse"
    },
    {
      type: "text",
      content: "El m√©todo record() con el que lo hacemos viene heredado de AggregateRoot, clase que adem√°s de este m√©todo que nos a√±ade un evento a la lista ofrece un pullDomainEvents() que como su nombre indica volcar√° todos los eventos de la lista y la vaciar√° (para evitar volverlos a tener en un posterior acceso)"
    },
    {
      type: "text",
      content: "Este pullDomainEvents() ser√° precisamente al que llamaremos desde el caso de uso en el momento en el que queremos que el EventBus los publique una vez que la l√≥gica se ha llevado a cabo y, en este caso, se ha guardado correctamente el curso en BD (recordemos que es el servicio de aplicaci√≥n el que va a llamar a los distintos servicios de dominio y establecer la barrera transaccional a nivel de acceso a BD y publicaci√≥n de Eventos)"
    },
    {
      type: "text",
      content: "A nivel de tests tambi√©n tendremos que validar, tal como hicimos con la persistencia en BD mockeando la implementaci√≥n del repositorio, que el evento creado se acaba publicando (pod√©is verlo aqu√≠)"
    },
    {
      type: "text",
      content: "Una alternativa a esta propuesta de publicaci√≥n de eventos para evitar tener que apilarlos dentro del agregado podr√≠a ser pasar por par√°metro del named constructor el propio eventBus y el repositorio, de modo que sea desde este mismo punto donde persistamos en BD y publiquemos el evento para quien est√© escuchando. El beneficio que nos ofrece esta posibilidad es el hecho de evitar que pudiera llamarse a este m√©todo sin guardar en BD o publicar el evento"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚ô® Implementaci√≥n del Event Bus con Spring Events!"
    }
  ],
};
