export default {
  title: "07 Implementacion del test unitario y caso de uso",
  videoId: "Un-Q984Kwmk",
  notes: [
    { type: "subtitle", content: "Implementaci√≥n del test unitario y caso de uso" },
    {
      type: "text",
      content: "Es hora de crear el test unitario que cubra nuestro caso de uso y de implementar el mismo. Iremos directamente al paso de tener la implementaci√≥n del caso de uso en la capa de aplicaci√≥n y no en el Controller, ya que a pesar de poder considerarlo un caso previo, esto supone un problema a la hora de crear el test unitario y nos obligar√° a duplicar el test si queremos llamar al caso de uso desde un comando de cli ü§Ø"
    },
    { type: "subtitle", content: "Creaci√≥n del Caso de Uso üë®üèΩ‚Äçüíª" },
    {
      type: "text",
      content: "El primer paso ser√° crear en el m√≥dulo de cursos (contexto de Mooc) sus correspondientes carpetas de Arquitectura Hexagonal üéØ. Dentro de aplicaci√≥n seguimos una l√≥gica de crear una carpeta para cada acci√≥n que vayamos a tener asociada a ese m√≥dulo, por lo que ahora tendremos una para 'crear' un curso (Veremos como esta separaci√≥n por acciones ser√° muy √∫til cuando usemos CQRS) y dentro de esta a√±adimos nuestro caso de uso"
    },
    {
      type: "text",
      content: "Este caso de uso ser√° el que inyectaremos en el Controller, llam√°ndo al m√©todo create() que recibir√° tanto el id de la ruta como el nombre y la duraci√≥n del cuerpo de la Request. Este m√©todo est√° declarado como void, haci√©ndo √©nfasis en que lo que har√° precisamente ser√° provocar un efecto colateral (Publicar un curso)"
    },
    {
      type: "text",
      content: "Recordemos que en la clase Starter ya hab√≠amos indicado que nos escaneara ciertos directorios para saber qu√© inyectar, adem√°s de esto hemos a√±adido la anotaci√≥n @Service (encapsulando la anotaci√≥n de SpringBoot)"
    },
    { type: "subtitle", content: "Clase CourseCreator:" },
    {
      type: "code",
      content: "@Service\npublic final class CourseCreator {\n    private final CourseRepository repository;\n\n    public CourseCreator(CourseRepository repository) {\n        this.repository = repository;\n    }\n\n    public void create(String id, String name, String duration) {\n        Course course = Course.create(id, name, duration);\n\n        repository.save(course);\n    }\n}"
    },
    {
      type: "text",
      content: "Y puesto que lo que queremos es precisamente guardar un Curso, necesitaremos que reciba la Interface del repositorio donde vamos a persistirlo (Tal como vimos en el curso de DDD Aplicado, este nivel de indirecci√≥n nos permitir√° falsear la implementaci√≥n del repositorio en tiempo de test)"
    },
    {
      type: "text",
      content: "Tambi√©n venimos hablando que nuestros repositorios deben hablar siempre en el mismo nivel de abstracci√≥n, es decir, siempre van a recibir como argumento un Agregado o, en caso de b√∫squeda, el identificador √∫nico del recurso, por lo que al llamar al m√©todo save() del repositorio tendremos que pasarle una instancia de Curso"
    },
    { type: "subtitle", content: "Creaci√≥n del Test Unitario ‚úÖ" },
    {
      type: "text",
      content: "Mimificando lo que acabamos de crear en real, tendremos su correspondiente test unitario en en la carpeta /application dentro del m√≥dulo de cursos en nuestro directorio de tests"
    },
    {
      type: "text",
      content: "Lo primero que tendremos que hacer ser√° instanciar este caso de uso, pero ojo üëÄ, aqu√≠ es donde est√° la trampa, ya que no le estaremos pasando la implementaci√≥n real del repositorio sino un 'test double' con mockito. Lo que queremos precisamente es verificar el paso de mensajes entre el caso de uso y el repositorio, no nos interesa en este test comprobar si efectivamente estamos guardando el curso en BD"
    },
    {
      type: "text",
      content: "As√≠, lo que comprobamos en el test es justamente que se llama al menos una vez al m√©todo save() del repositorio inyectado recibiendo un curso igual que el que hemos instanciado con los mismos par√°metros que recibe el caso de uso"
    },
    {
      type: "text",
      content: "Ser√° necesario implementar el equals() para que compare el Curso por sus valores y no por identificador de la propia instancia"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: Implementaci√≥n del repositorio en memoria y test de integraci√≥n!"
    }
  ],
};
