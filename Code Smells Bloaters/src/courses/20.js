export default {
  title:
    "20 C√≥mo gestionar par√°metros de aplicaci√≥n Replace Parameter with Method Call Refactoring",
  videoId: "YeBgDBkRVEc",
  notes: [
    { type: "text", content: "Los par√°metros de aplicaci√≥n son algo bastante habitual y no quer√≠amos pasar sin ver las distintas alternativas que podemos encontrar para gestionarlos. Para ponernos todos en situaci√≥n, un par√°metro de aplicaci√≥n ser√° algo que vamos a inyectar en nuestro caso de uso" },
    
    { type: "subtitle", content: "‚öí Par√°metro de aplicaci√≥n" },
    
    { type: "text", content: "Clase ChatController:" },
    
    { type: "code", content: `public final class ChatController {
  public static final int NEW_CHAT_ROLLOUT_PERCENTAGE = 30;

  public String pullMessages() {
      if (new Random().nextInt(100) <= NEW_CHAT_ROLLOUT_PERCENTAGE) {
          return "Messages from the NEW chat system";
      } else {
        return "Messages from the OLD chat system"
      }
  }
}` },

    { type: "text", content: "Un ejemplo de par√°metro de aplicaci√≥n podr√≠a ser el rango de porcentaje de peticiones/usuarios que queremos que entren por un nuevo sistema para ir balanceando la carga de peticiones por cualquier raz√≥n" },
    
    { type: "text", content: "Simplificando al m√°ximo posible, vemos c√≥mo el valor del porcentage que establece ese criterio de balanceo viene definido por una constante a modo de 'feature flag' dentro del propio controlador. Aunque en principio cumple con su funci√≥n correctamente, esta t√©cnica implica algunos problemas üòì" },
    
    { type: "text", content: "Clase ChatControllerShould:" },
    
    { type: "code", content: `public final class ChatControllerShould {
    @Test
    @Disabled("This fails randomly because we can't control the CHAT_ROLLOUT_PERCENTAGE")
    void should_use_the_old_chat_system_pulling_messages() {
        var controller = new ChatController();

        assertEquals("Messages from the OLD chat system", controller.pullMessages());
    }
    // more...
}` },

    { type: "text", content: "El principal problema que encontramos aqu√≠ es que, al tener harcodeado el valor del porcentage en el controlador directamente, los tests van a fallarnos aleatoriamente y no podremos comprobar que al ejecutarse van a ir a un sistema o al otro. Esto habitualmente va a llevarnos a desactivar los tests implicados asumiendo que ser√° algo temporal durante el RollOut" },
    
    { type: "subtitle", content: "üß∂ Costura de Test" },
    
    { type: "text", content: "Una alternativa para evitar ese problema ser√≠a definir un m√©todo dentro del controlador que establezca el valor del porcentaje, de modo que podamos crear una clase hija de dicho controlador en la cual sobrescribamos el m√©todo y as√≠ podamos jugar con una clase hija que siempre devuelva 0 o 100 en base al sistema por el que queramos que acceda" },
    
    { type: "text", content: "Aunque sigue siendo una opci√≥n no demasiado limpia, puede ser totalmente v√°lida si estamos trabajando sobre una clase demasiado grande y no podemos abordar otro tipo de refactor en ese momento, adem√°s de permitirnos ir a√±adiendo cobertura de tests a nuestro c√≥digo ü§∑üèº‚Äç‚ôÇÔ∏è" },
    
    { type: "subtitle", content: "üì• Parametrizando la clase" },
    
    { type: "text", content: "La alternativa por la que nosotros apostamos es la de parametrizar el valor del porcentaje, es decir, que la clase ChatController recibir√° desde el exterior dicho valor üì•" },
    
    { type: "text", content: "Clase ChatController (parametrizando el valor):" },
    
    { type: "code", content: `public final class ChatController {
  private final int newChatRolloutPercentage;

  public ChatController(int newChatRolloutPercentage) {
      this.newChatRolloutPercentage = newChatRolloutPercentage;
  }

  public String pullMessages() {
      if (new Random().nextInt(100) <= newChatRolloutPercentage) {
          return "Messages from the NEW chat system";
      } else {
        return "Messages from the OLD chat system"
      }
  }
}` },

    { type: "text", content: "Aqu√≠ se nos abren diferentes posibilidades, como recibirlo en el constructor al instanciar la clase o que sea el m√©todo pullMessages() quien lo reciba como argumento. En este caso, al ser un valor que no variar√° en tiempo de ejecuci√≥n, optar√≠amos por pas√°rselo en el constructor" },
    
    { type: "text", content: "De este modo, ya s√≥lo tendr√≠amos que pasarle el valor que queramos al instanciar la clase en cada uno de los tests. Adem√°s estamos permitiendo que el valor que reciba pueda ser diferente para los distintos entornos de trabajo" },
    
    { type: "subtitle", content: "üÜô Reemplazar par√°metro de aplicaci√≥n por llamada a un m√©todo" },
    
    { type: "text", content: "Generalmente, cuando introducimos este tipo de flags para pruebas A/B, quien tiene mayor inter√©s en probar c√≥mo se comporta en uno u otro caso suele ser el equipo de producto, y no tiene mucho sentido tener que depender de que el desarrollador nos modifique el valor de estos par√°metros cada vez que necesitemos probar la nueva feature" },
    
    { type: "text", content: "En estos casos, lo ideal es que cualquier persona que necesite probarlo pueda modificarlo f√°cilmente desde un panel de administraci√≥n, con lo que la inyecci√≥n del valor como hab√≠amos visto previamente no resulta la mejor opci√≥n ¬øQu√© podemos hacer en su lugar? ¬°Patr√≥n Repository al rescate! üôå" },
    
    { type: "text", content: "Clase ChatController (repository):" },
    
    { type: "code", content: `public final class ChatController {
    private final ChatRolloutPercentageRepository rolloutRepository;

    public ChatController(ChatRolloutPercentageRepository rolloutRepository) {
        this.rolloutRepository = rolloutRepository;
    }

    public String pullMessages() {
        if (new Random().nextInt(100) <= rolloutRepository.percentage()) {
            return "Messages from the NEW chat system";
        } else {
            return "Messages from the OLD chat system";
        }
    }
}` },

    { type: "text", content: "Al hacer uso de este patr√≥n, podemos utilizar cualquier implementaci√≥n para ChatRolloutPercentageRepository que acceda, por ejemplo, a un campo almacenado en BD y que podr√≠amos modificar de forma externa en un dashboard sin necesidad de tocar el c√≥digo üëå" },
    
    { type: "text", content: "Clase ChatControllerShould (repository):" },
    
    { type: "code", content: `public final class ChatControllerShould {
    @Test
    void should_use_the_old_chat_system_pulling_messages() {
        var controller = new ChatController(new AlwaysOldChatChatRolloutPercentageRepository());

        assertEquals("Messages from the OLD chat system", controller.pullMessages());
    }

    // more...` },

    { type: "text", content: "Adem√°s, al hacer uso de inversi√≥n de dependencias podemos aprovechar para cambiar la implementaci√≥n de este repository en tiempo de tests, utilizando una que tenga un valor fijo y determinado en base a lo que queramos testear (Pod√©is profundizar m√°s sobre el Principio de Inversi√≥n de Dependencias en el curso de Principios SOLID)" },
    
    { type: "text", content: "Por supuesto, en base a las necesidades de nuestra aplicaci√≥n bien podemos preferir o interesarnos m√°s cualquiera de las distintas alternativas que hemos visto y os invitamos a comentar aqu√≠ abajo por qu√© apostar√≠ais por una u otra opci√≥n üòÉ" },
    
    { type: "subtitle", content: "¬øAlguna Duda?" },
    
    { type: "text", content: "Si tienes alguna duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá" },
    
    { type: "text", content: "¬°Nos vemos en la pr√≥xima lecci√≥n: ü•ñ Data Clumps Code Smell!" }
  ],
};
