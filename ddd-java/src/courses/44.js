export default {
  title: "44 Integracion con sistema de plantillas Freemarker",
  videoId: "O53kDIamb3E",
  notes: [
    { type: "subtitle", content: "üåá Integraci√≥n con sistema de plantillas Freemarker" },
    {
      type: "text",
      content: "Para crear el Frontend del backoffice utilizaremos FreeMarker como sistema de plantillas, as√≠ que lo primero que necesitamos es a√±adir esta dependencia a nuestra aplicaci√≥n y llevar a cabo algunos ajustes para su integraci√≥n"
    },
    {
      type: "text",
      content: "Esta dependencia la a√±adiremos en el fichero 'build.gradle' de la aplicaci√≥n, en lugar de en el contexto como hab√≠amos visto en otros casos, ya que es la propia aplicaci√≥n la que servir√° las plantillas."
    },
    {
      type: "text",
      content: "Una vez hecho el build de gradle con las nuevas dependencias ser√° necesario definir la configuraci√≥n web, para ello creamos dentro del /config de la aplicaci√≥n esta clase BackofficeFrontendWebConfig (Se ha cambiado el nombre respecto al video para referenciar sobre qu√© frontal aplica üëÄ) que implementa el WebMvcConfigurer de Springboot, a√±adiendo las anotaciones necesarias para que el framework sepa que es un fichero de configuraci√≥n y que debe habilit√°rnoslo como frontal web"
    },
    {
      type: "text",
      content: "Dentro de esta clase le especificaremos en addResourceHandlers() donde debe buscar los ficheros est√°ticos para llev√°rselos a la raiz de la url. Por otro lado, tambi√©n especificaremos el sufijo de nuestras templates e inhabilitaremos la cach√© (s√≥lo para pruebas, en producci√≥n debemos tenerla siempre habilitada ‚úÖ). Finalmente tambi√©n vamos a especificar en qu√© ruta podr√° encontrar las templates y con qu√© codificaci√≥n vamos a trabajar: UTF-8"
    },
    {
      type: "text",
      content: "As√≠, crearemos las templates dentro del directorio /resources de nuestra aplicaci√≥n, teniendo master.ftl como la principal en la propia ra√≠z de este directorio (no olvidemos a√±adir este directorio en el listado del 'build.gradle' ü§î). Es importante que, aunque est√© dentro de nuestra aplicaci√≥n, lo encapsulemos en una carpeta con el nombre de la aplicaci√≥n ya que al lanzar la aplicaci√≥n los directorios de recursos se comprimen al primer nivel y esto provocar√≠a una colisi√≥n al buscar los datos"
    },
    {
      type: "subtitle",
      content: "Clase HomeGetWebController:"
    },
    {
      type: "code",
      content: "@Controller\npublic final class HomeGetWebController {\n    @GetMapping(\"/\")\n    public ModelAndView index() {\n        return new ModelAndView(\"pages/home\", new HashMap<String, Serializable>() {{\n            put(\"title\", \"Welcome\");\n            put(\"description\", \"CodelyTV - Backoffice\");\n        }});\n    }\n}"
    },
    {
      type: "text",
      content: "Si nos fijamos en el controlador que nos proveer√° la Home veremos que en lugar de a√±adir la anotaci√≥n @RestController, lleva simplemente la anotaci√≥n @Controller que prescinde de todos los recursos para la comunicaci√≥n REST. Este controlador devolver√° un ModelAndView que contiene tanto la ruta de nuestra template como un mapa con los atributos que le vamos a pasar a √©sta para que los renderice"
    },
    {
      type: "text",
      content: "Esta template 'home.ftl' est√° heredando de 'master.ftl' para permitirnos reutilizar los elementos base de la web como el header y el footer y a√±adir los bloques que nos interesen en medio"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚åöÔ∏è Contador de cursos v√≠a query desde Controller!"
    }
  ],
};
