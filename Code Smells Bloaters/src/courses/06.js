export default {
  title: "06 Large class deteccion",
  videoId: "ejfG1vwL5I8",
  notes: [
    {
      type: "subtitle",
      content: "Large Class: Detecci칩n, problemas y estado ideal"
    },
    {
      type: "text",
      content: "Aunque seguimos con el mismo ejemplo de los v칤deos anteriores, vamos a introducir dos diferencias: Por un lado vamos a pasar todo con Javascript (ten칠is el acceso al ejemplo justo aqu칤)"
    },

    {
      type: "text", 
      content: "y por otro pasaremos a enfocarnos al code smell de Large Class 游듹"
    },
    {
      type: "text",
      content: "Como indica su nombre, este code smell hace referencia a aquellas class que son excesivamente grandes. Si bien podr칤amos pensar que este est치 estrechamente relacionado del Long Method, no siempre era as칤"
    },
    {
      type: "text",
      content: "Pongamos como ejemplo el t칤pico modelo de 'User', el cual tiene una serie de campos 'base', puede ser que se supone necesarios que para un determinado contexto (Backend/Contract en DDD) este User adem치s de esos campos tenga otros tantos m치s, por lo que se los a침adimos al modelo"
    },
    {
      type: "text",
      content: "Al final, con esto conseguiremos tener una clase User enorme por todo ese conjunto de campos que no necesitamos para un determinado contexto"
    },
    {
      type: "text",
      content: "Por otra parte, podr칤amos considerar llevar la gesti칩n de estas diferencias a la capa de servicio y que fueran unos UserMockManager y UserBackofficeManager se ocuparan de toda esta informaci칩n particular de cada contexto, pero si entramos hablando de una herencia pr치ctica (como veremos a continuaci칩n), ni estar칤amos evitando que finalmente en BD sigui칠ramos teniendo una tabla User con un mont칩n de columnas"
    },
    {
      type: "text",
      content: "Siguiendo el enfoque de DDD, si los campos de User necesarios en el contexto de Mooc son diferentes a los necesarios para el Backoffice, tiene bastante sentido separarlo en dos clases User diferentes con los datos realmente necesarios para su contexto"
    },
    {
      type: "text",
      content: "Esta separaci칩n nos ayuda no s칩lo a que este modelo User no sea una clase inmensa, sino tambi칠n a que, a nivel de infraestructura, en BD contemos con tablas con menor n칰mero de columnas y que cualquier posible impacto sobre una de las tablas se mantenga en el 치mbito del bloque en el que estamos trabajando"
    },
    {
      type: "text",
      content: "Todo esto nos lleva a considerar detalles de dise침o de la aplicaci칩n para definir a d칩nde debemos llevar la l칩gica. Tal como plantea el principio de Tell, Don't Ask o Ley de Demeter, deber칤amos asignar toda la l칩gica de negocio lo m치s pr칩ximo posible, siempre que el principio de menor servicio externo. Con esto nos acercamos justamente a dos aspectos clave de la Programaci칩n Orientada a Objetos: Alta Cohesi칩n y Bajo Acoplamiento"
    },
    {
      type: "link",
      content: "https://es.wikipedia.org/wiki/Ley_de_Demeter"
    },
    {
      type: "text", 
      content: "As칤, si en la capa de servicio podemos evitar tener una clase larga a trav칠s de la Responsabilidad 칔nica y una composici칩n sobre herencia, en el modelo del dominio 칰nicamente tendremos que hacer uso de la Segregaci칩n en base al contexto"
    }
  ],
};
