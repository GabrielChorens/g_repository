export default {
  title:
    "21 Comunicaci√≥n entre capas Introduce Parameter Object Refactoring para objeto Request",
  videoId: "ekY297WLIns",
  notes: [
    { type: "text", content: "El caso del 'Introduce Parameter Object' como t√©cnica de refactoring es bastante habitual y en esta ocasi√≥n lo veremos con un ejemplo en Javascript donde resalta el hecho de que podemos encontrar ciertos acoplamientos en nuestro c√≥digo que podr√≠an pasar por alto debido a la ausencia de namespaces que nos avisen expl√≠citamente de este problema" },

    { type: "text", content: "Concretamente nos encontramos con el t√≠pico objeto Request que podr√≠amos tener en cualquiera de nuestros controllers y que contendr√° los datos necesarios para gestionar alguna petici√≥n que recibamos üì•" },

    { type: "text", content: "Clase CourseCreator (Estado inicial):" },

    { type: "code", content: `export class CourseCreator {
    constructor(repository) {
        this.repository = repository;
    }

    create(request) {
        const course = new Course(request.body.id, request.body.name, request.body.duration);

        this.repository.save(course);
    }
}` },

    { type: "text", content: "Este caso de uso recibe la misma request que nos llega en el controller, con los atributos recibidos en esta request instanciar√° el Course que posteriormente persista en BD. Aunque a simple vista parezca que no tenemos ning√∫n acoplamiento con el framework o librer√≠a empleada para la comunicaci√≥n HTTP (No estamos importando nada que venga de fuera ni el tipado del par√°metro nos lo sugiere), lo cierto es que si lo hay üïµÔ∏è‚Äç‚ôÄÔ∏è" },

    { type: "text", content: "Si nos fijamos en el formato que tiene este request veremos que para acceder a los distintos atributos debemos entrar dentro de alg√∫n objeto body, esto es algo que no hemos definido nosotros de forma interna y, por lo tanto, no tenemos control sobre √©l: Si el framework decidiera cambiar la estructura de su objeto Request, nos afectar√≠a gravemente en cada punto en el que estemos accediendo a √©l" },

    { type: "text", content: "Pod√©is profundizar m√°s en estos conceptos de acoplamiento, capa de infraestructura, dominio‚Ä¶ en el curso de Arquitectura Hexagonal que ten√©is inclu√≠do en la plataforma üëå" },

    { type: "subtitle", content: "En resumen:" },

    { type: "text", content: "üôà Que no veamos imports o un tipado concreto no significa que no haya acoplamiento" },
    { type: "text", content: "üèó El acoplamiento puede provocar un grave impacto si se realizan cambios en la librer√≠a/framework" },

    { type: "text", content: "Para evitar el perjucio que supone mantener este dise√±o de nuestra aplicaci√≥n ser√° necesario que a√±adamos un nivel de indirecci√≥n entre el controlador y el caso de uso a modo de 'contrato'" },

    { type: "subtitle", content: "‚òùÔ∏è Enviando los atributos separados" },

    { type: "text", content: "Un primer paso que podr√≠amos llevar a cabo es dejar de enviar todo el objeto Request al caso de uso para enviarle √∫nicamente los campos que necesita para crear el curso, para ello podemos ayudarnos con el IDE para realizar un 'extract method'" },

    { type: "text", content: "Clase CourseCreator (pasando argumentos):" },

    { type: "code", content: `export class CourseCreator {
    constructor(repository) {
        this.repository = repository;
    }

    create(id, name, duration) {
        const course = new Course(id, name, duration);

        this.repository.save(course);
    }
}` },

    { type: "text", content: "Este paso nos permite ya ser mucho mas expl√≠citos con respecto a lo que el caso de uso requiere realmente y evitar que pueda hacer acceder a cualquier otro elemento que pueda llevar la request original üîé (otro ejemplo donde podemos ver claramente este code smell es en el uso de 'containers' que pasemos a las clases por inyecci√≥n de dependencias)" },

    { type: "subtitle", content: "‚úåÔ∏è Introduciendo Parameter Object" },

    { type: "text", content: "Si bien ya hemos conseguido desacoplar nuestros casos de uso del framework que estemos utilizando en la comunicaci√≥n con nuestros controladores, lo cierto es que tener que pasar todos los par√°metros disgregados al caso de uso resulta algo bastante tedioso adem√°s de que dificultar√° cualquier posible migraci√≥n posterior a CQRS" },

    { type: "text", content: "As√≠ pues, el siguiente paso que dar√≠amos en este proceso de refactoring ser√≠a el de introducir un DTO (Data Transfer Object) en la comunicaci√≥n con el caso de uso" },

    { type: "text", content: "Clase CoursesController:" },

    { type: "code", content: `export class CoursesController {
    constructor(courseCreator) {
        this.courseCreator = courseCreator;
    }

    create(request) {
        this.courseCreator.create(new CreateCourseRequest(request.body.id, request.body.name, request.body.duration));

        return {status: 201};
    }
}` },

    { type: "text", content: "Como su propio nombre indica, se trata de agrupar todos esos elementos separados en un √∫nico objeto de par√°metros cuya funci√≥n no es m√°s que transferir datos entre las distintas capas de nuestra aplicaci√≥n" },

    { type: "text", content: "Clase CourseCreator (estado final):" },

    { type: "code", content: `export class CourseCreator {
    constructor(repository) {
        this.repository = repository;
    }

    create(request) {
        const course = new Course(request.id, request.name, request.duration);

        this.repository.save(course);
    }
}` },

    { type: "text", content: "Aunque en este caso el nombre del objeto que pasamos al caso de uso coincide con el que hab√≠a inicialmente, podemos ver que ahora lo que enviamos es un DTO modelado por nosotros y sobre el que si tenemos control üôå" },

    { type: "subtitle", content: "¬øAlguna Duda?" },

    { type: "text", content: "Si tienes alguna duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá" },

    { type: "text", content: "¬°Nos vemos en el siguiente video: üéõÔ∏è C√≥mo gestionar configuraci√≥n de infraestructura!" }
  ],
};
