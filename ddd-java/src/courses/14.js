export default {
  title: "14 Integraci√≥n de Hibernate respetando DDD",
  videoId: "cEfTjK5ipeI",
  notes: [
    { type: "subtitle", content: "Integraci√≥n de Hibernate respetando DDD" },
    {
      type: "text",
      content: "Hibernate es el ORM que utilizaremos para gestionar la comunicaci√≥n con nuestra BD, pero por defecto √©ste nos obligar√≠a a implementar m√∫ltiples anotaciones en nuestras entidades y, como venimos hablando con DDD, queremos que las entidades conozcan s√≥lo de nuestro Dominio y no se vean acopladas al modo en que opere la Infraestructura. Adem√°s, este tipo de implementaci√≥n con anotaciones supondr√≠a una gran restricci√≥n al limitarnos a un s√≥lo tipo de mapeo (no podr√≠amos mapear las entidades para guardarlas en un Redis, por ejemplo)"
    },
    { type: "subtitle", content: "A√±adiendo las dependencias üë®‚Äçüëß‚Äçüë¶" },
    {
      type: "text", 
      content: "Dentro del fichero build.gradle principal tendremos que a√±adir una serie de dependencias relacionadas con el ORM en el bloque que corresponde a todos los sub-proyectos"
    },
    {
      type: "text",
      content: "hibernate-core: Nos permitir√° usar este ORM\nspring-orm: Nos facilitar√° la gesti√≥n de dependencias y el manejo de operaciones transaccionales\ntomcat-dbcp: Lo usaremos para el pull de conexiones en producci√≥n (por defecto hibernate nos proporciona uno para entornos de desarrollo)\njaxb-impl & jaxb-api: Nos ayudar√°n bastante cuando mapeemos nuestras entidades en XMLs"
    },
    { type: "subtitle", content: "Preparando nuestra configuraci√≥n personalizada üë®‚Äçüé®" },
    {
      type: "text",
      content: "Hemos preparado una configuraci√≥n muy fina üëå a base de leer mucha documentaci√≥n y picar mucho en c√≥digo, y que ya ten√©is accesible en este repo"
    },
    {
      type: "text",
      content: "Como dec√≠amos, queremos que el mapping de nuestras entidades est√© definido por XMLs para no contaminar nuestro Dominio, pero tampoco queremos que estos ficheros XML se encuentren por cualquier parte de nuestro c√≥digo sin ning√∫n orden, sino que queremos mantenerlos dentro de la capa de Infraestructura de forma ordenada üìÇ"
    },
    {
      type: "text",
      content: "El est√°ndar que seguiremos ser√° crear dentro de la carpeta de Infraestructura de cada m√≥dulo un directorio 'persistencia' üïã (para recoger todo lo asociado a la persistencia de datos) y en √©sta un sub-directorio 'hibernate' donde tendremos todo lo que sea propio y personalizado de este ORM (tendr√≠amos una por cada adaptador), como son los XMLs de mapeo con las entidades. Esta convenci√≥n nos va a permitir que despu√©s podamos escanear de forma automatizada estas carpetas en busca de ficheros de configuraci√≥n üî¶"
    },
    {
      type: "text",
      content: "Ser√° en el fichero HibernateConfigurationFactory (en el video MoocHibernateConfiguration, se ha abstra√≠do esta l√≥gica a la infraestructura compartida por todos los contextos, dejando en MoocHibernateConfiguration la configuraci√≥n propia de acceso a su BD) donde se produce precisamente esta magia para recuperar estos XMLs y realizar el mapeo correspondiente con nuestras entidades de Dominio"
    },
    {
      type: "text",
      content: "En esta clase hemos a√±adido dos anotaciones importantes: por un lado @EnableTransactionManagement nos habilitar√° que podamos usar el transaccional y montar las queries adecuadamente, y por otro @Configuration nos servir√° para indicarle que se trata de una clase de configuraci√≥n. Dentro sessionFactory() estaremos cargando los 'dataSources' para la conexi√≥n a nuestra BD y las propiedades de Hibernate"
    },
    { type: "subtitle", content: "HibernateProperties:" },
    {
      type: "text",
      content: "HBM2DDL_AUTO : Con esta propiedad indicamos qu√© hacer cuando ejecutamos una query e Hibernate detecta que la tabla no existe\nSHOW_SQL : Determina si se mostrar√° en el output de la consola las queries que est√°n ejecut√°ndose\nDIALECT : Identifica el dialecto utilizado en las queries"
    },
    {
      type: "text",
      content: "Finalmente esta clase de configuraci√≥n tambi√©n cargar√° los ficheros de mapeo. Para ello hemos preparado una funci√≥n que recorra el Path para recuperar de cada m√≥dulo sus correspondientes ficheros XMLs (Lo ten√©is aqu√≠ a tiro fijo para ahorraros la paliza de investigar c√≥mo hacerlo). Ojo üëÄ que el m√©todo setMappingLocations() lo que espera recibir es un 'Variable Argments' y no un Array"
    },
    {
      type: "text",
      content: "Finalmente, si volvemos a nuestra clase Starter tendremos dos puntos a considerar: Por un lado el hecho de estar escaneando la carpeta 'tv.codely.mooc' y haber a√±adido la anotaci√≥n @Configuration har√° que SpringBoot cargue autom√°gicamente la configuraci√≥n que acabamos de ver, y por otro lado hemos indicado en la anotaci√≥n @SpringBootAplication que nos excluya la clase HibernateJpaAutoConfiguration para que las magias de configuraci√≥n interna de esta clase no entren en conflicto con la que hemos personalizado nosotros"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üó∫ Mapeo de Modelos de Dominio en Hibernate!"
    }
  ],
};
