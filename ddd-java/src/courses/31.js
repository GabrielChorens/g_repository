export default {
  title: "31 Test y comando para el consumidor de eventos de dominio",
  videoId: "NyDE-KdI5wU",
  notes: [
    { type: "subtitle", content: "Test y comando para el consumidor de eventos de dominio" },
    {
      type: "text",
      content: "Testeando la publicaci√≥n y consumo de eventos ‚úÖ"
    },
    {
      type: "text", 
      content: "A nivel de test queremos comprobar que podemos publicar y posteriormente consumir eventos de dominio sin que se produzca ning√∫n error en el proceso"
    },
    {
      type: "subtitle",
      content: "Clase MySqlEventBusShould:"
    },
    {
      type: "code",
      content: "@Test\nvoid publish_and_consume_domain_events_from_msql() {\n    CourseCreatedDomainEvent domainEvent = CourseCreatedDomainEventMother.random();\n\n    eventBus.publish(Collections.singletonList(domainEvent));\n\n    consumer.consume();\n}"
    },
    {
      type: "text",
      content: "Lo que haremos por tanto ser√° crearnos un evento cualquiera a trav√©s del ObjectMother para, en primer lugar, publicarlo con la implementaci√≥n en MySql del EventBus y finalmente ejecutar el consumer que tambi√©n estar√° tirando de la implementaci√≥n en MySql. En este caso la validaci√≥n pasa por ejecutar ammbas piezas sin que se haya producido ninguna excepci√≥n aunque podr√≠amos hilar m√°s fino y comprobar tambi√©n que efectivamente se est√° llamando al EventBus local que usabamos dentro del consumer pas√°ndole la instancia del evento que acabamos de publicar"
    },
    {
      type: "text",
      content: "(Pod√©is ver el test en este punto desde este commit del repo)"
    },
    {
      type: "subtitle",
      content: "Preparando el comando para consumir los eventos üèé"
    },
    {
      type: "text",
      content: "Para poder ejecutar el consumidor de eventos cuando sea necesario vamos a crear un comando de consola (CLI). Estos comandos, como vimos al principio del curso cuando configur√°bamos la aplicaci√≥n, se definen dentro de un HashMap de tipo <nombreComando, Comando> dentro de la clase de aplicaci√≥n (En este caso MoocBackendApplication), lo que permite que sea cada equipo de desarrollo quien tome la responsabilidad de sus propios consumidores"
    },
    {
      type: "text",
      content: "Este comando recibe por constructor nuestra implementaci√≥n en MySql del consumer y lo ejecuta dentro del m√©todo execute()"
    },
    {
      type: "text",
      content: "La idea ser√° aprovechar que estamos trabajando con un lenguaje compilado como Java para mantener indefinidamente ejecut√°ndose este proceso üèÉ, a esto podr√≠amos a√±adirle mayor complejidad a trav√©s de orquestadores que nos faciliten el escalado del volumen de consumidores en determinados contextos"
    },
    {
      type: "text",
      content: "Por otro lado, tambi√©n es importante que establezcamos alg√∫n controller interno que nos permita establecer una cl√°usula de 'Graceful shutdown' para parar este proceso si fuera necesario como en el caso de ir a desplegar de nuevo la aplicaci√≥n, dejando de consumir temporalmente estos eventos. Ojo üëÄ! Aunque hayamos parado de hacer peticiones a la BD, es muy importante dejar un tiempo prudencial para que terminen de procesarse los √∫ltimos eventos que han sido recuperados"
    },
    {
      type: "text",
      content: "Tambi√©n debemos tener presente tanto eliminar los eventos una vez procesados como el hecho de limpiar la Unit of Work a cada vuelta de estas iteraciones"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en la siguiente lecci√≥n: ‚ö°Ô∏è Publicar eventos de dominio as√≠ncronos y escalables utilizando RabbitMQ!"
    }
  ],
};
