export default {
  title: "24 Implementaci√≥n de repositorio sin Hibernate",
  videoId: "SxNMtugIIz8",
  notes: [
    { type: "subtitle", content: "Implementaci√≥n de repositorio sin Hibernate" },
    {
      type: "text",
      content: "Una de las dudas que nos transmit√≠an desde el cuestionario de Feedback es el hecho de no utilizar Hibernate en la implementaci√≥n de los repositorios, ya sea por evitar esa complejidad o porque queremos especificar nosotros mismos las queries, por lo que antes de continuar en la l√≠nea del curso nos detendremos un momento a hablar sobre este tema üôã‚Äç‚ôÇÔ∏è"
    },
    {
      type: "text",
      content: "En casos en los que partimos un proyecto de cero y sabemos que no tendremos m√°s de dos o tres queries, a√±adirlas y lanzarlas en plano puede ser m√°s r√°pido que a√±adir las dependencias y montar el mapping correspondiente. No obstante, en el momento en el que el n√∫mero de queries aumente, nos resultar√° m√°s rentable un ORM y reutilizar las piezas en com√∫n"
    },
    {
      type: "text",
      content: "A nivel de c√≥digo, gracias a los contratos de dominio establecidos, s√≥lo tendr√≠amos que tocar la implementaci√≥n del repositorio. La diferencia en comparaci√≥n con lo que actualmente tenemos estar√≠a en que por una parte eliminar√≠amos las dependencias con Hibernate y por otra lanzar√≠amos las queries en plano desde los m√©todos save/search realizando los bindings de los valores en la sentencia directamente"
    },
    {
      type: "text",
      content: "Al haber seguido Arquitectura Hexagonal y acotar el contenido en m√≥dulos entre los cuales no se dan JOINs, las queries que montar√° el ORM ser√°n muy sencillas y con una buena performance, no habiendo generalmente apenas diferencia con la que podr√≠amos montar nosotros en plano"
    },
    {
      type: "text",
      content: "Un contexto en el que podemos asumir que podemos necesitar esas consultas personalizadas y picadas por nosotros mismos es aqu√©l en el que tengamos relaciones many-to-many que no podamos remodelar a relaciones m√°s sencillas. No obstante, tal y como vimos en el curso de DDD Aplicado, es muy importante considerar modelar los datos en base a como ser√°n consumidos y no a como se reciben (Read-model) ya que en comparaci√≥n con los accesos de escritura, las lecturas a nuestra BD ser√°n mucho m√°s elevadas y las que finalmente paguen el coste de c√≥mo hayamos modelado los datos"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en la siguiente lecci√≥n: üì§ Eventos de dominio en memoria con Spring Events: Incrementar el total de cursos!"
    }
  ],
};
