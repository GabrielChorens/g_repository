export default {
  title: "59 Cache de servidor Optimizar casos de uso sin ensuciar el dominio",
  videoId: "qW3WZY82azQ",
  notes: [
    { type: "subtitle", content: "‚úåÔ∏è Cache de servidor: Optimizar casos de uso sin ensuciar el dominio" },
    {
      type: "text",
      content: "Coment√°bamos en el video anterior cual era la aproximaci√≥n por la cual apostar√≠amos a la hora de establecer una cach√© de servidor: Encapsulada en la capa de Infraestructura sin que el caso de uso se vea afectado. As√≠ que ahora veremos c√≥mo podr√≠amos implementarlo y la implicaci√≥n que estos cambios tendr√° en los tests ü§î"
    },
    {
      type: "text", 
      content: "Partimos de la premisa de que estuvi√©ramos en un caso en que no queremos asumir de momento una nueva infraestructura en producci√≥n para nuestra BD (coste econ√≥mico, curva de aprendizaje, etc), y en lugar de ello nos interesa mas meter una capa de cach√© en memoria o en un Redis por delante de nuestro repositorio de MySQL aplicando el Patr√≥n Decorator"
    },
    {
      type: "text",
      content: "CodelyTv Tip ‚òùÔ∏è: Vamos a trabajar con un ejemplo muy simplificado sin detenernos en temas de gesti√≥n de memoria, sin embargo es un aspecto que debemos tener muy presente para no encontrarnos posteriormente con problemas por exceso de consumo de memoria al cachear demasiado contenido y/o demasiado tiempo sin ir liberando de forma programada"
    },
    {
      type: "text",
      content: "Un primer detalle importante que encontramos en este decorator es que le pasamos la interface del repositorio por constructor, con lo que podremos envolver cualquier implementaci√≥n (MySQL, Elasticsearch) indistintamente. Adem√°s, nos aseguramos de que la interacci√≥n del application service con el repositorio no se vea afectada ya que el decorator tambi√©n estar√≠a implementando la interface definida en el caso de uso ‚úåÔ∏è"
    },
    {
      type: "text",
      content: "Lo que har√° esta capa ser√° actuar a modo de 'proxy' en el sentido de que cuando desde nuestro application service llamemos a recuperar el listado (completo o filtrado), lo que har√° ser√° comprobar primero si los tiene en cach√© y s√≥lo si no los tiene, recuperarlos del repositorio decorado. A la hora de persistir, si en lugar de mantener la cach√© 'en memoria' lo hici√©ramos en un Redis, simplemente guardar√≠amos los datos de forma paralela en ambos"
    },
    {
      type: "text",
      content: "Otra cuesti√≥n que podemos tener en cuenta a la hora de gestionar este tipo de cach√©s es el TTL (Time To Live) de lo que almacenamos, en nuestro caso optamos por delegarlo en la propia infraestructura ya que Redis cuenta de por si con un manejo muy fino üëå de los TTL y nos aporta mayor beneficio que el hecho de gestionarlo nosotros mismos, adem√°s estar√≠amos asumiendo que este tipo de cach√©s no son una cuesti√≥n de negocio sino un detalle de infraestructura que nos permita avanzar sin tener que invertir demasiado en la mejora de dicha infraestructura"
    },
    {
      type: "text",
      content: "A nivel de Tests debemos considerar que lo que nos interesa comprobar acerca de este decorator es que la cach√© en memoria y la comunicaci√≥n con el repositorio decorado realmente funciona correctamente, no as√≠ tanto si aqu√©l persiste correctamente en BD puesto que es algo que ya estamos validando en otros tests de integraci√≥n. Por esto, ser√° este uno de los pocos casos en los que si que nos interese mockear el repositorio en un test de integraci√≥n"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üëÆ‚Äç Autorizaci√≥n!"
    }
  ],
};
