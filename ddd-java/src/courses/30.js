export default {
  title: "30 Consumir eventos de dominio desde MySQL",
  videoId: "UlA9gCp7v1w",
  notes: [
    { type: "subtitle", content: "Consumir eventos de dominio desde MySQL" },
    {
      type: "text",
      content: "Estableciendo la nueva implementaci√≥n de EventBus ü•á"
    },
    {
      type: "text", 
      content: "Antes de entrar en el consumidor de eventos vamos a establecer que al levantar nuestra aplicaci√≥n tome la implementaci√≥n de MySql cuando inyectemos el EventBus puesto que actualmente tenemos dos diferentes (con MySql y con Spring Events) ü§∑‚Äç‚ôÇ"
    },
    {
      type: "text",
      content: "Una posibilidad para hacer esto ser√≠a a√±adir la anotaci√≥n @Service en la implementaci√≥n de MySql y borrarla en la de Spring Events, sin embargo esto supondr√≠a no poder inyectar dicha implementaci√≥n en ninguna parte y lo cierto es que nos interesa poder seguir utiliz√°ndola en tiempo de Tests"
    },
    {
      type: "text",
      content: "En su lugar lo que haremos ser√° a√±adir la anotaci√≥n @Primary de Spring en la clase MySqlEventBus que lo que har√° ser√° indicarle al framework que cuando se encuentre con el conflicto de seleccionar una implementaci√≥n de varias posibles, escoja esta üëâ"
    },
    {
      type: "subtitle",
      content: "Consumiendo eventos desde MySql üê≥"
    },
    {
      type: "text",
      content: "Lo primero que encontramos en el consumer es una query nativa, tal como vimos en videos anteriores, para recuperar los eventos de BD ordenados por fecha ascendente y limitados por un 'chunk'"
    },
    {
      type: "text",
      content: "Ojo üëÄ, es muy importante la cuesti√≥n de recuperarlos y ejecutar las acciones derivadas de cada uno de forma ascendente. No obstante, nuestros consumidores deben ser tolerantes a la posibilidad de que la infraestructura utilizada no nos garantice que est√©n ordenados (profundizamos mucho m√°s acerca de estos detalles en el curso de Event-Driven Architecture)"
    },
    {
      type: "text",
      content: "El hecho de establecer un l√≠mite con ese chunk se debe a que al no usar un sistema de streaming para hacer pulls en BD nos interesa m√°s ir recuperando y procesando lotes de eventos (si trat√°semos de recuperar todos de golpe podr√≠a darse el caso de que en el proceso de estuvieran a√±adiendo nuevos eventos)"
    },
    {
      type: "text",
      content: "Por cada row recuperada llamaremos al m√©todo executeSubscribers(), que recibir√° los atributos del evento (los cuales extraemos del array de objetos en cada row)"
    },
    {
      type: "text",
      content: "Dentro de este m√©todo usaremos en primer lugar el nombre del evento para obtener la clase asociada, lo cual conseguimos gracias al mapeo realizado en la clase DomainEventsInformation. Esta clase utilizar√° la librer√≠a reflections para escanear nuestro package en busca de aquellas clases que hereden de DomainEvent para realizar el mapeo <nombreEvento, claseEvento>"
    },
    {
      type: "text",
      content: "Puesto que Java no nos permite tener m√©todos est√°ticos en clases abstractas y no poder llamar sin m√°s al m√©todo eventName(), nos vemos obligados a crear una instancia vac√≠a (para lo cual hemos tenido que a√±adir un constructor vac√≠o en los eventos de dominio) de cada evento para as√≠ poder llamar a dicho m√©todo y recuperar el nombre"
    },
    {
      type: "text",
      content: "Aunque este proceso de reflexi√≥n es bastante costoso, el hecho de definir la clase DomainEventsInformation como servicio har√° que se cree como un Singleton y que una vez arrancado llamemos siempre a la misma instancia üôã"
    },
    {
      type: "text",
      content: "Una vez recuperada la clase del Evento concreto tendremos que hacer uso una vez m√°s de una instancia vac√≠a para poder llamar al m√©todo fromPrimitives() que como vimos en lecciones anteriores nos permit√≠a instanciar un evento a partir de datos primitivos, parseando campo body de Json al HashMap que espera el m√©todo"
    },
    {
      type: "text",
      content: "Con nuestra instancia de DomainEvent ya s√≥lo queda publicarla en el bus. Ojo üëÄ porque aprovecharemos esa instancia local de EventBus de Spring que hab√≠amos visto previamente, lo que buscamos con esto es beneficiarnos tanto de las ventajas que nos ofrece el EventBus distribu√≠do (como poder atacarlo desde cualquier otra aplicaci√≥n) como de las que nos ofrece consumirlas en ese EventBus local"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üé≠ Test y comando para el consumidor de eventos de dominio!"
    }
  ],
};
