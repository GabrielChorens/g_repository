export default {
  title:
    "16 Mejorando El Mundo Real‚Ñ¢Ô∏è Introduce Parameter Object Refactoring para entidades con m√°s de 20 at",
  videoId: "L-UNHhw57tg",
  notes: [
    {
      type: "text",
      content: "Otro de los code smells que podemos encontrar con bastante frecuencia en nuestro d√≠a a d√≠a es el de aquellas entidades con un n√∫mero demasiado grande de argumentos üöõ en su constructor"
    },
    {
      type: "text", 
      content: "Para refactorizar este tipo de constructores, o tambi√©n en m√©todos que tambi√©n reciban muchos argumentos, y simplificar su firma utilizaremos el concepto de Parameter Object. Este tipo de t√©cnica consistir√° en agrupar en una s√≥la clase aquellos par√°metros que est√©n fuertemente relacionados"
    },
    {
      type: "text",
      content: "Clase Booking (Constructor inicial):"
    },
    {
      type: "code",
      content: `public final class Booking {
    // more...
    public Booking(
        BookingId id,
        LocalDateTime startDate,
        LocalDateTime endDate,
        CustomerId customerId,
        CustomerName customerName,
        EmailAddress customerEmail,
        BookingType bookingType,
        DiscountType discountType,
        DiscountValue discountValue,
        TaxType taxType,
        TaxValue taxValue
    ) {
        this.id            = id;
        this.startDate     = startDate;
        this.endDate       = endDate;
        this.customerId    = customerId;
        this.customerName  = customerName;
        this.customerEmail = customerEmail;
        this.bookingType   = bookingType;
        this.discountType  = discountType;
        this.discountValue = discountValue;
        this.taxType       = taxType;
        this.taxValue      = taxValue;
    }
    // more...
}`
    },
    {
      type: "text",
      content: "Como podemos ver en este ejemplo, la clase Booking viene requiriendo una cantidad bastante grande de argumentos para ser instanciada, probablemente porque iterativamente hemos ido necesitando a√±adir esos atributos para satisfacer diferentes necesidades en la aplicaci√≥n."
    },
    {
      type: "text",
      content: "El objetivo es reducir el n√∫mero de elementos y de paso tratar de empujar hacia abajo la l√≥gica que tengan asociada ¬øC√≥mo? ü§î"
    },
    {
      type: "text",
      content: "CodelyTV Tips ‚òùÔ∏è: Un truquillo √∫til para ver si tiene sentido agrupar algunos atributos es fijarse en los prefijos/sufijos que tengan (Ej. DiscountType, DiscountValue‚Ä¶)"
    },
    {
      type: "text",
      content: "Como estamos trabajando con Java, aprovecharemos que nos permite hacer sobrecarga de m√©todos y constructores para trabajar sobre un segundo constructor sin tener que modificar el que ya ten√≠amos, y as√≠ los clientes no se estar√°n viendo a√∫n afectados. En el caso de otros lenguajes como PHP lo que podremos hacer es recurrir a un named constructor"
    },
    {
      type: "text",
      content: "Clase Booking (Sobrecarga de constructor):"
    },
    {
      type: "code",
      content: `public final class Booking {
    // more...
    public Booking(
        BookingId id,
        DateRange bookingPeriod,
        CustomerId customerId,
        CustomerName customerName,
        EmailAddress customerEmail,
        BookingType bookingType,
        DiscountType discountType,
        DiscountValue discountValue,
        TaxType taxType,
        TaxValue taxValue
    ) {
      this(
        id,
        bookingPeriod.start(),
        bookingPeriod.end(),
        customerId,
        customerName,
        customerEmail,
        bookingType,
        discountType,
        discountValue,
        taxType,
        taxValue
      );
        
    }
    // more...
}`
    },
    {
      type: "text",
      content: "En esta ocasi√≥n, y siguiendo algo que vendr√≠amos haciendo familiarmente en nuestro d√≠a a d√≠a, optamos por definir en primer lugar el nuevo constructor y dejar que el IDE nos vaya avisando de aquellas cositas que hay que a√±adir o modificar üïµÔ∏è"
    },
    {
      type: "text",
      content: "Al crear la clase DateRange podemos agrupar los par√°metros de fecha de entrada y salida de la reserva, reduciendo un poco el listado de argumentos que recibir√≠a este constructor. De momento lo que haremos ser√° pasarle al constructor inicial los dos par√°metros desglosados de esta clase"
    },
    {
      type: "text",
      content: "De momento mantendremos el constructor inicial, ya que podr√≠amos estar afectando a cualquier cliente que lo est√© usando, pero modificaremos nuestros tests para utilizar el nuevo y ver que, efectivamente, todo sigue funcionando correctamente"
    },
    {
      type: "text",
      content: "Resaltar que, en nuestra opini√≥n, seguir este tipo de mec√°nica de refactoring resulta muy interesante en el Mundo Real‚Ñ¢ para poder ir pagando deuda t√©cnica pasito a pasito cada vez que tengamos que entrar a estas clases para, por ejemplo, a√±adir alguna nueva funcionalidad, ya que son cambios paralelos que podemos ir abordando poco a poco y teniendo la tranquilidad de no estar rompiendo nada"
    },
    {
      type: "text",
      content: "Una vez aplicado el cambio y nos hemos asegurado de que todos los clientes utilizan ahora el nuevo constructor, podemos eliminar el antiguo para evitar que vuelva a utilizarse por error. Pero ojo üëÄ porque ven√≠amos llamando a ese constructor desde el nuevo (this(...)), por lo que antes de borrarlo, tendremos que mover esa l√≥gica y volver a validar que todo sigue funcionando bien ‚úÖ"
    },
    {
      type: "text",
      content: "Sabiendo que todo sigue funcionando despu√©s de haber mejorado la firma del constructor, podemos guardar cambios y seguir adelante üôå"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes cualquier duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚öôÔ∏è C√≥mo gestionar par√°metros de aplicaci√≥n: Replace Parameter with Method Call Refactoring!"
    }
  ],
};
