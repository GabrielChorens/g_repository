export default {
  title: "28 Refactorizando La Clase User",
  videoId: "wUqOpjLN7VY",
  notes: [
    {
      type: "subtitle",
      content: "Refactorizando bloaters code smells"
    },
    {
      type: "text",
      content: "Llegados a este punto ya hemos visto las distintas t√©cnicas de refactoring que podemos aplicar para los bloaters code smells y el por qu√© de la necesidad de aplicar dichas t√©cnicas, as√≠ que ahora veremos el proceso de una forma m√°s global desde el punto de partida hasta el estado final del refactor"
    },
    {
      type: "text", 
      content: "El ejemplo que utilizaremos lo pod√©is encontrar aqu√≠ y se trata del mismo escenario que vimos en videos anteriores"
    },
    {
      type: "subtitle",
      content: "Clase UserController (estado inicial):"
    },
    {
      type: "code",
      content: "final class UserController\n{\n    public function post(string $emailAddress): User\n    {\n        if ('' === $emailAddress) {\n            throw new InvalidArgumentException('The email address is empty');\n        }\n\n        if (!filter_var($emailAddress, FILTER_VALIDATE_EMAIL)) {\n            throw new InvalidArgumentException(\"The email address <$emailAddress> is not valid\");\n        }\n\n        if (!(strpos($emailAddress, '@yahoo') || strpos($emailAddress, '@gmail') || strpos($emailAddress, '@outlook'))) {\n            throw new InvalidArgumentException(\"The email address <$emailAddress> has not a common provider\");\n        }\n\n        return new User($emailAddress);\n    }\n}"
    },
    {
      type: "text",
      content: "Lo primero que detectamos en este controlador son una serie de bloques if que bien podr√≠amos extraer a cl√°usulas de guarda, de hecho las excepciones que lanzan ya nos est√°n sugiriendo bastante que apliquemos este refactor. Lo mismo sucede en el caso del NewsletterController"
    },
    {
      type: "subtitle",
      content: "üëÆ‚Äç‚ôÇÔ∏è Extrayendo cl√°usulas de guarda"
    },
    {
      type: "text",
      content: "Pod√©is ver aqu√≠ c√≥mo quedar√≠a nuestro controlador una vez extra√≠das las cl√°usulas de guarda üëÆ"
    },
    {
      type: "text",
      content: "En este paso hemos definido estas cl√°usulas como m√©todos est√°ticos ya que al no depender del estado, de momento, los vendremos utilizando tanto en la propia clase UserController como en NotificationsController. Desde ambos puntos de entrada se llama a ensureEmaiIsValid(), el cual engloba las tres cl√°usulas o condiciones que ve√≠amos inicialmente"
    },
    {
      type: "subtitle",
      content: "üë§ Empujando validaciones hacia User"
    },
    {
      type: "text",
      content: "El siguiente paso pod√©is verlo aqu√≠ y consiste en empujar la l√≥gica de la validaci√≥n del email hacia nuestro dominio, movi√©ndola dentro de la clase User üèó"
    },
    {
      type: "text",
      content: "Puesto que s√≥lo hemos movido de sitio estos m√©todos (move method), en este punto el NewsletterController pasa de llamar a un m√©todo est√°tico de UserController para hacerlo a uno de User, es decir, hemos pasado la dependencia entre controladores a una dependencia con un modelo m√°s interno"
    },
    {
      type: "subtitle",
      content: "‚úâÔ∏è Definiendo Value Objects"
    },
    {
      type: "text",
      content: "Como se puede ver en este paso, hemos creado un Value Object EmailAddress que es quien recoger√° las validaciones de que un email es v√°lido. Por otro lado mantenemos la validaci√≥n de que una direcci√≥n de email (emailAddress) pertenezca a un proveedor com√∫n justo donde estaba, ya que un email puede ser v√°lido aunque pertenezca a un proveedor distinto"
    },
    {
      type: "text",
      content: "Un detalle importante es que al llevarnos estas validaciones/reglas de integridad al momento de instanciaci√≥n de las clases estamos evitando que, por definici√≥n, se pueda instanciar cualquier clase inv√°lida de este tipo, con lo que podemos asumir en todo momento que si recibimos un emailAddress, este cumple con las reglas"
    },
    {
      type: "subtitle",
      content: "üë§‚úâÔ∏è Moviendo l√≥gica a UserEmailAddress"
    },
    {
      type: "text",
      content: "A√∫n podemos hilar un poco m√°s fino, tal como vemos aqu√≠ y empujar a UserEmailAddress aquella l√≥gica particular de validaci√≥n del Email para los usuarios y evitar as√≠ que la clase User asuma esa responsabilidad"
    },
    {
      type: "text",
      content: "Como se puede ir viendo, aunque de inicio hayamos estado definiendo funciones p√∫blicas y est√°ticas, el estado final que perseguimos es justamente el opuesto: que nuestros m√©todos sean lo m√°s privados posible y evitar cualquier leak de informaci√≥n hacia el exterior"
    },
    {
      type: "text",
      content: "Notese que hemos llamado a la clase 'UserEmailAddress' y no 'UserEmail' con toda la intenci√≥n, ya que en este caso estamos tratando √∫nicamente con la direcci√≥n de correo y no con un correo completo (asunto, cuerpo, destinatarios‚Ä¶)"
    },
    {
      type: "subtitle",
      content: "Clase UserController (estado final):"
    },
    {
      type: "code",
      content: "final class UserController\n{\n    public function post(string $emailAddress): User\n    {\n        return new User(new UserEmailAddress($emailAddress));\n    }\n}"
    },
    {
      type: "text",
      content: "El estado final del controlador es mucho m√°s conciso y limpio, habi√©ndo encapsulado la responsabilidad de las validaciones a cada Value Object y evitado todo el acoplamiento que ten√≠a inicialmente"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido de este video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚ú® Qu√© pasa cuando no hay clases: JavaScript te miro a ti!"
    }
  ],
};
