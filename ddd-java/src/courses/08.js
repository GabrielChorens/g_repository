export default {
  title: "08 Implementacion del repositorio en memoria y test de integracion",
  videoId: "1HSBc8GYKPM",
  notes: [
    { type: "subtitle", content: "Implementaci√≥n del repositorio en memoria y test de integraci√≥n" },
    {
      type: "text",
      content: "Llegados a este punto s√≥lo nos quedar√≠a a√±adir la implementaci√≥n del repositorio (en este caso lo haremos en memoria) y su test de integraci√≥n asociado para cerrar el ciclo de ATDD para el caso de uso de publicar un nuevo curso"
    },
    {
      type: "text", 
      content: "Esta implementaci√≥n del repositorio la tendremos en Infraestructura. Recordemos que llevaremos a esta capa aquellas piezas de c√≥digo que:"
    },
    {
      type: "text",
      content: "Toquen Entrada/Salida de datos üì§\nSe est√©n acoplando a un vendor externo üì¶\nNecesitemos que nos ofrezca tolerancia al cambio a la hora de falsear la implementaci√≥n ü§∏‚Äç‚ôÇÔ∏è"
    },
    { type: "subtitle", content: "Clase InMemoryCourseRepository:" },
    {
      type: "code",
      content: "public final class InMemoryCourseRepository implements CourseRepository {\n\n    private HashMap<String, Course> courses = new HashMap<>();\n\n    @Override\n    public void save(Course course) {\n        courses.put(course.id(), course);\n    }\n\n    public Optional<Course> search(String id) {\n        return Optional.ofNullable(courses.get(id));\n    }\n\n}"
    },
    {
      type: "text",
      content: "Un primer detalle que podemos ver es que la interface del repositorio no tiene nada en el nombre que la identifique como tal, y esto es as√≠ porque al haberla definido como CourseRepository nos obligar√° a que cualquier implementaci√≥n que hagamos de ella tenga que especificar en el nombre y de forma expl√≠cita üí¨ las particularidades que tiene (En memoria, MySQL, o cualquier otra)"
    },
    {
      type: "text",
      content: "La implementaci√≥n del m√©todo save() ser√° tan simple como a√±adir el Curso recibido en un Map dentro de la clase con el id como clave. Por otra parte, de cara a la testabilidad de esa implementaci√≥n nos interesar√° tambi√©n crear un m√©todo search() que nos permita recuperar un Curso a partir del id y verificar si realmente se est√° guardando, devolviendo un Optional de null si no encuentra nada"
    },
    { type: "subtitle", content: "Test InMemoryCourseRepositoryShould:" },
    {
      type: "code",
      content: "final class InMemoryCourseRepositoryShould {\n    @Test\n    void save_a_course() {\n        InMemoryCourseRepository repository = new InMemoryCourseRepository();\n\n        repository.save(new Course(\"some-id\",\"some-name\",\"some-duration\"));\n    }\n\n    @Test\n    void return_an_existing_course() {\n      InMemoryCourseRepository repository = new InMemoryCourseRepository()\n        Course course = new Course(\"some-id\",\"some-name\",\"some-duration\");\n\n        repository.save(course);\n\n        assertEquals(Optional.of(course), repository.search(course.id()));\n    }\n\n    @Test\n    void not_return_a_non_existing_course() {\n      InMemoryCourseRepository repository = new InMemoryCourseRepository();\n        assertFalse(repository.search(\"non-existing-id\").isPresent());\n    }\n}"
    },
    {
      type: "text",
      content: "En el primer testCase simplemente comprobaremos que no se produce ning√∫n error cuando guardamos el nuevo curso en BD, mientras que en el segundo lo que haremos una vez persistido ser√° llamar al m√©todo search() para comprobar que efectivamente se ha guardado en nuestro repositorio en memoria, comparando el Curso que hemos pasado en el save() y lo que nos devuelva la b√∫squeda (Recordemos que nos devolver√° un Optional de Course)"
    },
    {
      type: "text",
      content: "En nuestra opini√≥n no vemos necesidad de eliminar el primer testCase pese a estar cubierto por el segundo porque de este modo, si falla al guardar saltar√° el error en ambos tests, mientras que si el problema est√° al recuperar s√≥lo fallar√° el segundo test"
    },
    {
      type: "text",
      content: "Finalmente tambi√©n aprovechamos para comprobar que, si intentamos buscar un curso con un id no existente, no nos devolver√° nada"
    },
    {
      type: "text",
      content: "¬°Ojo üëÄ! No olvidemos que para que Spring reconozca nuestras nuevas implementaciones para poder inyectarlas debemos a√±adirles la anotaci√≥n @Service"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en la siguiente lecci√≥n: üë§ Modelando el dominio: Agregado Course"
    }
  ],
};
