export default {
  title: "02 Estructura de carpetas DDD en Java",
  videoId: "1NhJnYZbgq4",
  notes: [
    { type: "subtitle", content: "Estructura de carpetas DDD en Java" },
    {
      type: "text",
      content: "Comenzamos nuestro proyecto y el primer paso ser√° definir la estructura de carpetas con la que trabajaremos de aqu√≠ en adelante, viendo c√≥mo llevarnos los conceptos de DDD a un proyecto en Java ‚òïÔ∏è"
    },
    {
      type: "text", 
      content: "Partimos de la decisi√≥n desde negocio de crear una plataforma de cursos (mooc) que ser√° gestionada y analizada desde un backoffice, adem√°s tambi√©n contaremos con un blog donde se publicar√°n art√≠culos y entrevistas. Estas 'entidades' las entenderemos como Bounded Contexts que, a su vez, estar√°n compuestos por distintos m√≥dulos (Videos, Cursos, Tickets, Estudiantes‚Ä¶)"
    },
    {
      type: "text",
      content: "Tal como explicamos en el curso de DDD Aplicado, las aplicaciones (entry points del frontend y el backend) atacar√°n a estos contextos y se situar√°n fuera de √©stos ya que una misma aplicaci√≥n podr√° necesitar atacar a distintos Bounded Contexts"
    },
    {
      type: "text",
      content: "El conjunto de aplicaciones y Bounded Contexts podremos tenerlos dentro de un mismo repositorio (monorepositorio) o en repositorios distintos, esto es totalmente viable gracias a que aplicaremos una capa de anti-corrupci√≥n v√≠a eventos con los que nos comunicaremos entre contextos e incluso entre m√≥dulos de un mismo contexto üì¨"
    },
    { type: "subtitle", content: "Directorios üìÅ" },
    {
      type: "text",
      content: "A nivel de directorios lo que encontraremos en el primer nivel ser√°n dos carpetas"
    },
    {
      type: "text",
      content: "apps: Aqu√≠ se ubicar√°n las aplicaciones (BackofficeFrontend, BackofficeBackend‚Ä¶)\nsrc: En esta carpeta ir√°n todos nuestros contextos (Mooc, Backoffice‚Ä¶)"
    },
    {
      type: "text",
      content: "Este nivel materializa precisamente la idea de que las aplicaciones est√°n fuera de los Bounded Contexts (una aplicaci√≥n podr√° atacar al c√≥digo de n Bounded Contexts), lo cual supone una gran ventaja en t√©rminos de rendimiento ya que nos evitar√° tener que salir a la red para realizar llamadas Http a la API"
    },
    {
      type: "text",
      content: "Dentro de apps encontramos la carpeta /main y /test, que como veremos mimificar√° la estructura de /main. Dentro de la carpeta main tendremos la carpeta /resources y /apps, en la cual separaremos las aplicaciones frontend y backend pertenecientes a cada contexto"
    },
    {
      type: "text",
      content: "En la carpeta src tendremos en un primer nivel los distintos contextos adem√°s del shared kernel  y, dentro de cada uno de ellos encontramos la carpeta /main y la carpeta /test (de nuevo mimificando a la carpeta main)"
    },
    {
      type: "text",
      content: "Tal como coment√°bamos al inicio, cada Bounded Context contendr√° una serie de m√≥dulos adem√°s de un 'shared' en el que llevaremos todas las piezas comunes entre los m√≥dulos de cada contexto. Esta estructura lo que nos ofrece es que lo primero que encontraremos al entrar ser√°n conceptos de dominio (curso, video, estudiantes‚Ä¶) dando m√°s importancia a √©stos que a los aspectos t√©cnicos ü§î, adem√°s la aplicaci√≥n estar√° mucho m√°s cohesionada y ser√° mucho m√°s f√°cil identificar posibles acoplamientos no deseados"
    },
    {
      type: "text",
      content: "Si entramos en cualquiera de estos m√≥dulos ya si encontraremos las distintas carpetas de Arquitectura Hexagonal (aplicaci√≥n, dominio, infraestructura) conteniendo el menor c√≥digo posible, siendo este el momento en el que cobra mayor importancia el modelado de nuestro dominio"
    },
    {
      type: "image",
      content: "src/assets/02.png"
    },
    {
      type: "subtitle",
      content: "Automatizaci√≥n üöÄ"
    },
    {
      type: "named_link",
      text: "java-ddd-skeleton: Repositorio sobre el cual trabajaremos a lo largo del curso",
      url: "placeholder"
    },
    {
      type: "text",
      content: "Hemos preparado este repositorio abierto en Github que pod√©is usar a modo de plantilla base sobre la que levantar vuestros proyectos Java en DDD. Una ventaja que supone la funci√≥n 'Use this template' es que os crear√° un proyecto en vuestro repo con un commit inicial a vuestro nombre, dej√°ndolo mucho m√°s limpio que si hici√©ramos un 'fork' de la plantilla"
    }
  ],
};
