export default {
  title: "02 Caso evernote p1 hasta 656",
  videoId: "r06zI2VkU3k",
  notes: [
    {
      type: "subtitle",
      content: "Muerte por deuda t√©cnica: Cu√°ndo refactorizar",
    },
    {
      type: "text",
      content:
        "Los problemas derivados de acumular demasiada deuda t√©cnica en nuestra aplicaci√≥n no son algo que deberiamos menospreciar tal y como vemos en el ejemplo de Evernote, que se vio en la necesidad de parar durante 18 meses todos sus desarrollos s√≥lo para poder renacer la aplicaci√≥n",
    },
    { type: "link", content: "placeholder" },
    {
      type: "text",
      content:
        "El caso de Evernote se encuentra en un escenario bastante frecuente de entropia continua de valor, ya que con ritmo de trabajo vamos empujando los problemas t√©cnicos hacia un rincon oscuro y en lugar de irlos abordando, acabamos generando esa deuda t√©cnica. Una de las soluciones a este problema es la que aqu√≠ abordaremos: Frenar los desarrollos de nuevas features y renacer todo desde cero",
    },
    {
      type: "text",
      content:
        "Por supuesto, ya se hubieran detectado a tiempo todos esos 'code smells' que conforman la marcha atr√°s y hubieran sido recomendaciones m√°s sencillas y habr√≠a permitido obtener unas bases s√≥lidas de clean code sobre las que trabajar",
    },
    {
      type: "text",
      content:
        "Pero ¬øcu√°ndo refactorizar? ¬øEs necesario un paron total o nos ponemos a refactorizar c√≥digo? Por supuesto habra que tempranar en lo que probablemente NO sea necesario: imaginar que un se esta validando simplemente la idea del producto a vender.",
    },
    {
      type: "text",
      content:
        "Por otra lado, cuando ya tenemos un producto validado, que genera beneficios y debemos seguir teniendo en consideraci√≥n cuando hacerlo y a que alcance. El riego para este tipo de acciones en una empresa de venta online es muy alto, sobretodo en periodos de ventas finales de verano. Por supuesto, cuanto m√°s deuda t√©cnica acumulemos, m√°s riesgo y mayor impacto tendr√° cuando nos decidamos a pagarla.",
    },
    { type: "subtitle", content: "La regla del boy scout" },
    {
      type: "text",
      content:
        "Al igual que los buenos scouts procuran dejar el campo un poco mejor de como lo encontraron, una buena pr√°ctica para evitar precisamente esta 'muerte por deuda t√©cnica' es aprovechar cuando debemos modificar alg√∫n c√≥digo para mejorarlo si detectamos peque√±os code smells por el camino üî•",
    },
    {
      type: "text",
      content:
        "Con esto entramos en una toma de decisi√≥n bastante importante: ¬ømejoramos el c√≥digo primero o despu√©s? Existen dos factores principales a tener en cuenta: Por un lado la alternativa va a depender de distintos factores como:",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Mi conocimiento del dominio ¬øConozco bien el c√≥digo afectado o espero a terminar mi desarrollo?",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Afectaci√≥n sobre mi desarrollo ¬øFacilitar√° mi tarea el hecho de refactorizar primero?",
    },
    {
      type: "text",
      content:
        "Evidentemente, es algo m√°s que recomendado contar con una m√≠nima cobertura de tests que nos brinde la tranquilidad de saber que el refactor aplicado no est√° rompiendo nada üß™ y aportar la seguridad por un m√©todo preventivo en lugar de tratar de revertir todo de una sola vez.",
    },
    {
      type: "text",
      content:
        "Como apunte final üëæ queremos incidir en que evaluar de un c√≥digo legacy sin pararnos a identificar los problemas que presenta y las cosas que lo hacen dif√≠cil de mantener, muy probablemente nos llevar√° igualmente a repetir los mismos problemas aunque nos lancemos a rehacer todo desde 0, eso es lo que hace tan importante y necesario aprender a identificar todos esos code smells y c√≥mo solucionarlos.",
    },
    {
      type: "text",
      content:
        "En las siguientes lecciones profundizaremos en c√≥mo identificar y refactorizar todos esos code smells ¬°Vamos all√°!",
    },
    {
      type: "text",
      content:
        "We broke up the Monolith, and started using Event Sourcing: Slides de la charla que comentamos en el video",
    },
    {
      type: "link",
      content:
        "https://es.slideshare.net/JavierCane/we-broke-up-with-the-monolith-and-started-dating-eventsourcing-symfonycat",
    },
  ],
};
