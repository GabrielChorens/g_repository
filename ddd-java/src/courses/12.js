export default {
  title: "12 Patron ObjectMother para nuestros tests",
  videoId: "KIUtqR8D24M",
  notes: [
    { type: "subtitle", content: "Patr√≥n ObjectMother para nuestros tests" },
    {
      type: "text",
      content: "Hemos visto las ventajas que nos ofrece el uso de Value Objects dentro de nuestros agregados, peso este paso tambi√©n se traduc√≠a en tener que modificar nuestros tests üò≤. Para evitar tener que estar modificando tests cada vez que cambie alguna particularidad en nuestro dominio usaremos el Patr√≥n ObjectMother al rescate ü§∂"
    },
    {
      type: "text",
      content: "Un ObjectMother es una factor√≠a que nos va a permitir crear instancias del objeto en cuesti√≥n que estemos 'wrappeando'. Tal como venimos haciendo, mimificaremos en tests lo que tengamos en real, por lo que llevaremos estos ObjectMothers a la carpeta de dominio del m√≥dulo en el directorio de tests."
    },
    { type: "subtitle", content: "Clase CourseNameMother:" },
    {
      type: "code",
      content: "public final class CourseNameMother {\n    public static CourseName create(String value) {\n        return new CourseName(value);\n    }\n\n    public static CourseName random() {\n        return create(WordMother.random());\n    }\n}"
    },
    {
      type: "text",
      content: "Generalmente todos nuestros ObjectMothers tendr√°n dos m√©todos: uno que devolver√° una instancia del objeto en base a un valor que recibamos por par√°metro y otro que la devuelva en base a un valor aleatorio. Adem√°s de generar las instancias de nuestros Value Objects nos van a permitir que nuestros tests no se vean afectados si dichos Value Objects se modifican. Es precisamente por esto por lo que este m√©todo random() nos resulta tan √∫til, ya que podremos abstraernos en los tests de detalles como el valor que estamos definiendo por ejemplo para CourseName cuando lo que realmente nos interesa es validar que el curso se est√° guardando en BD"
    },
    {
      type: "text",
      content: "A un nivel de abstracci√≥n superior y sali√©ndonos de nuestros conceptos de Dominio encontramos otro tipo de factor√≠as como son los WordMother"
    },
    {
      type: "text",
      content: "Ojo üëÄ: Tendremos que a√±adir en el fichero build.gradle de los tests del contexto de Mooc que los tests depender√°n del contexto de Shared, que es donde tendremos la clase WordMother"
    },
    {
      type: "text",
      content: "Para a√±adir valor a esta factor√≠a y que podamos probar indirectamente la entrada de valores aleatorios en los tests nos apoyaremos en una librer√≠a externa como faker, que a√±adiremos en nuestros build.gradle. Una vez instalada, esta librer√≠a nos provee de una enorme cantidad de conceptos que podremos generar de forma aleatoria (En caso de tener restricciones de tama√±o, tipo de caracteres‚Ä¶ crear√≠amos m√©todos que acotasen estos valores a nuestras necesidades en la clase WordMother)"
    },
    {
      type: "text",
      content: "Delegando en estos ObjectMothers la tarea de instanciar nuestro Agregado conseguimos no s√≥lo la aleatoriedad de los valores utilizados en los tests, sino que estos queden mucho m√°s limpios al eliminar ru√≠do y que hablen mucho m√°s de lo que validan en lugar de perderse en otros detalles menos relevantes üïµ"
    },
    {
      type: "text",
      content: "Tal como hemos hecho con los Value Objects, tambi√©n podremos disponer de ObjectMothers para nuestros Agregados. Estos seguir√°n teniendo un par de m√©todos para instanciar el agregado bien a partir de unos atributos recibidos o bien gener√°ndo estos valores de forma aleatoria, pero adem√°s hemos definido un m√©todo fromRequest() que nos permita hacer la instancia a partir de una Request como la que le llegar√≠a al caso de uso (no una Request de Spring)"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üêí Tests m√°s sem√°nticos!"
    }
  ],
};
