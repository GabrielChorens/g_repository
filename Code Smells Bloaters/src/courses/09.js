export default {
  title: "09 Cu√°ndo usar clases para representar datos con Value Objects",
  videoId: "eyCIWbNj4vw",
  notes: [
    {
      type: "text",
      content:
        "Como cabe imaginar, Primitive Obsession es un tipo de code smell caracterizado por la obsesi√≥n de utilizar siempre tipos primitivos. En relaci√≥n a este, vamos a dar un repaso sobre cu√°ndo utilizar clases para representar nuestros datos",
    },
    {
      type: "text",
      content:
        "El concepto de Value Object es algo que hemos visto m√°s en profundidad en cursos como el de DDD aplicado, no obstante haremos un r√°pido resumen",
    },
    {
      type: "subtitle",
      content: "Primitive VS Value Object",
    },
    {
      type: "text",
      content:
        "Los primitivos son tipos de datos que vienen de forma nativa en el lenguaje y por tanto no tenemos que picar nada para disponer de ellos (int, string, integer, number). Aunque las clases, los wrappers como Integer o String en el caso de Java tambi√©n se consideran primitivos ya que igualmente no est√°n picadas por nosotros y no aportan mayor valor",
    },
    {
      type: "text",
      content:
        "Los Value Objects son clases que encapsulan un tipo primitivo y que nos permiten a√±adir l√≥gica relacionada con ese valor. Esto nos permite validar los datos y a√±adir comportamiento espec√≠fico para ese tipo de dato",
    },
    {
      type: "code",
      content: `class User {
    private locale: $locale;
    private age: $age;

    public function __construct($locale $locale, age $age) 
    {
        $this->locale = $locale;
        $this->age = $age;
    }
}

class Age {
    private int $value;

    public function __construct(int $value)
    {
        if ($value < 18) {
            throw new InvalidArgumentException("Must be young");
        }
        $this->value = $value;
    }
}`,
    },
    {
      type: "text",
      content:
        "En este c√≥digo ya podemos empezar a ver algunas cosas interesantes. Los tipos definidos en la firma del API nos est√° aportando mucha m√°s sem√°ntica e informaci√≥n sobre lo que espera recibir como argumentos",
    },
    {
      type: "text",
      content:
        "Dicho en otras palabras, nos permite empajar las restricciones de integridad de nuestro dominio a la propia definici√≥n",
    },
    {
      type: "text",
      content:
        "Si bien podr√≠amos llevarnos estas restricciones a la clase User en nuestro ejemplo, esto nos lleva a varios problemas importantes: En primer lugar estar√≠amos haciendo que esta clase se vuelva mucho m√°s dif√≠cil de mantener y comprenda demasiado (open/closed) que ya vimos en anteriores sesiones. En segundo lugar, esta alternativa muy probablemente nos lleve a tener que implementar las mismas reglas validaciones en cada clase en la que vayamos a pasar esa edad a una localizaci√≥n (fail en reutilizaci√≥n de c√≥digo üòû)",
    },
    {
      type: "subtitle",
      content: "Beneficios Value Objects",
    },
    {
      type: "text",
      content:
        "Haciendo resumen, los Value Objects nos ofrecen una serie de beneficios a tener en cuenta:",
    },
    {
      type: "text",
      content: "‚úÖ Mayor robustez en las validaciones",
    },
    {
      type: "text",
      content: "üß≤ Im√°n de l√≥gica de negocio perteneciente al VO",
    },
    {
      type: "text",
      content: "üëå Aportan sem√°ntica",
    },
    {
      type: "text",
      content: "üëÄ Simplifican la API",
    },
    {
      type: "text",
      content: "ü•∂ Otorgan inmutabilidad del objeto",
    },
    {
      type: "subtitle",
      content: "¬øD√≥nde usar Value Objects?",
    },
    {
      type: "text",
      content:
        "Hemos visto algunos ejemplos en los que resulta interesante utilizar Value Objects, no obstante existen algunos escenarios en los que suele acertar m√°s sobre si debemos o no utilizarlos:",
    },
    {
      type: "text",
      content:
        "Comunicaci√≥n entre capas: En la comunicaci√≥n entre capas de nuestra arquitectura es recomendable utilizar DTOs (Data Transfer Object), que no contienen ninguna l√≥gica de negocio",
    },
    {
      type: "text",
      content:
        "Modelos de dominio: Aqu√≠ debemos diferenciar entre VO y Modelos de dominio, ya que estos √∫ltimos tienen un identificador y el ciclo de vida identificable",
    },
    {
      type: "text",
      content:
        "Servicios: Al igual que en el caso de los boilerplate, hay distintas situaciones en las que deber√≠amos a nivel de equipo, enviando los primitivos a los modelos directamente o viceversa el propio servicio el encargado de instanciar los VO para pas√°rselos al modelo",
    },
    {
      type: "subtitle",
      content: "üöÄ ¬øBoilerplate?",
    },
    {
      type: "text",
      content:
        "Hemos visto los beneficios que nos ofrece, ya que queremos utilizar los Value Objects, pero adem√°s queremos poder generarlos de forma r√°pida. Por suerte, existen ciertas soluciones en base a los principales lenguajes:",
    },
    {
      type: "text",
      content:
        "Existe una propuesta denominada Records que entrar√° a partir de la JDK14 que nos ofrecer√° una forma de definir clases inmutables con sus getters (no setters), equals, hashCode, getters para dichos campos, su constructor y las implementaciones de toString, equals y hashCode",
    },
    {
      type: "link",
      content: "https://openjdk.java.net/jeps/359",
    },
    {
      type: "text",
      content:
        "En el caso de Kotlin encontramos las data class, que son bastante similares al caso de Java pero incluye algunas fant√°sticas como el hecho de sobrescribir internamente el 'toString' para acceder a un campo directamente, si est√° nombrado como 'value'. Puede verse una aproximaci√≥n a lo que ya encontr√°bamos en Scala con las CaseClass",
    },
    {
      type: "link",
      content:
        "https://dev.to/flbenz/kotlin-and-domain-driven-design-value-objects-4m32",
    },
    {
      type: "text",
      content:
        "En el caso de Typescript tambi√©n encontramos una aproximaci√≥n con el uso de los readonly en los atributos de una clase, si bien es una soluci√≥n algo m√°s verbosa, de momento no hay una estructura espec√≠fica como las que vimos en los lenguajes",
    },

    {
      type: "text",
      content:
        "A partir de PHP 8 encontramos lo que han denominado Constructor Property Promotion, que consiste en la posibilidad de a√±adir la visibilidad en los argumentos del constructor como p√∫blica, privada o protegida, lo cual nos ahorra mucho c√≥digo repetitivo. La contra que tiene esta soluci√≥n es que tambi√©n estar√≠amos permitiendo modificar el valor de dicho atributo ü§î tambi√©n por lo cual nos queda la visibilidad p√∫blica, asegur√°ndonos que no pueda modificarse pero oblig√°ndonos a picar nosotros mismos el getter",
    },
    {
      type: "link",
      content: "https://php.watch/versions/8.0/constructor-property-promotion",
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?",
    },
    {
      type: "text",
      content:
        "Si tienes cualquier duda sobre el contenido del v√≠deo o te apetece compartir cualquier sugerencia siempre puedes hacerlo en una nueva discusi√≥n justo aqu√≠ abajo üëá üëá üëá",
    },
    {
      type: "text",
      content:
        "¬°Nos vemos en el siguiente v√≠deo! üëã Replace Data Value with Object: Value Objects como imanes de l√≥gica para tus modelos!",
    },
  ],
};
