export default {
  title: "30 C√≥mo plantear un proceso de refactoring",
  videoId: "z-7dZfLPxDs",
  notes: [
    {
      type: "subtitle",
      content: "¬øPor d√≥nde empezamos?"
    },
    {
      type: "text", 
      content: "La primera duda que nos suele venir a la cabeza cuando nos planteamos refactorizar una aplicaci√≥n es ¬øPor d√≥nde empezamos? La que pod√©is ver aqu√≠ ser√≠a un ejemplo de cualquier caso real que pod√©is encontrar en vuestro d√≠a a d√≠a"
    },
    {
      type: "subtitle",
      content: "¬øQu√© queremos conseguir?"
    },
    {
      type: "text",
      content: "Una primera cuesti√≥n antes de bajar al terreno es la motivaci√≥n que nos mueve a querer refactorizar un c√≥digo que de base est√° funcionando ¬øQu√© queremos conseguir con este proceso? La importancia de esta cuesti√≥n radica en que en base al motivo (mantenibilidad, fiabilidad, escalabilidad‚Ä¶) tendremos que poner el foco en unos elementos u otros del c√≥digo"
    },
    {
      type: "subtitle",
      content: "Tests como punto de partida"
    },
    {
      type: "text",
      content: "Tal y como hemos venido hablando durante el curso, resulta super importante contar con tests que nos garanticen que no estamos rompiendo nada, aunque s√≥lo podamos establecer pruebas de caja negra o introducir logs debido a la baja testabilidad del c√≥digo, por lo que este deber√≠a ser el punto de partida en caso de no tenerlos ‚úÖ"
    },
    {
      type: "subtitle",
      content: "Identificar el dolor"
    },
    {
      type: "text",
      content: "Habiendo desbloqueado el tema de los tests, el siguiente paso deber√≠a ser identificar qu√© es realmente lo que m√°s nos est√° doliendo dentro del c√≥digo ¬øEs la mantenibilidad del c√≥digo o tenemos un cuello de botella que da√±a fuertemente el rendimiento de la aplicaci√≥n?"
    },
    {
      type: "subtitle",
      content: "Quick wins de rendimiento"
    },
    {
      type: "text",
      content: "Con frecuencia, los problemas de rendimiento pueden solventarse parcial o totalmente cambiando el modo en que recuperamos la informaci√≥n de BD o de servicios externos (Pod√©is ver en m√°s profundidad este tema en los cursos de Event-Driven Architecture y Domain-Driven Design). Cambios como el hecho de recuperar √∫nicamente los datos que necesitamos de BD o agrupar consultas en lugar de lanzarlas en un bucle iterativo son 'quick wins' que tambi√©n nos van a permitir ir mejorando el rendimiento de la aplicaci√≥n y ganar tiempo para poder refactorizar el c√≥digo con m√°s tranquilidad üèÜ"
    },
    {
      type: "subtitle",
      content: "Evitar patrones que dificultan la testabilidad"
    },
    {
      type: "text",
      content: "Otro aspecto de inter√©s a la hora de plantearnos este tipo de procesos es evitar el uso de Singletons y otros pratrones y pr√°cticas que dificultan la testabilidad del c√≥digo: si tenemos problemas para testear la aplicaci√≥n, tendremos problemas para garantizar que nada se rompe a causa del refactor ü§î Adem√°s, poder establecer test unitarios nos permitir√° abordar peque√±as porciones de c√≥digo sin depender del enorme tiempo que requiera la ejecuci√≥n de los tests de caja negra ‚è≥"
    },
    {
      type: "subtitle",
      content: "Promover flujos as√≠ncronos"
    },
    {
      type: "text",
      content: "La ejecuci√≥n de forma s√≠ncrona de acciones paralelas (Ej. Enviar una notificaci√≥n al usuario) es otro factor que puede da√±ar el rendimiento e incluso la mantenibilidad del c√≥digo, de modo que extraer esta l√≥gica a parte e ir promovi√©ndola a un flujo as√≠ncrono (Ej. colas de eventos) ser√° otro paso positivo para abordar nuestro proceso de refactoring"
    }
  ],
};
