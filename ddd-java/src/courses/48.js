 export default {
    title: "48 Nuevo Bounded Context Backoffice",
    videoId: "frv5KMhnHi4",
    notes: [
    { type: "subtitle", content: "ü§ñ Nuevo Bounded Context: Backoffice" },
    {
      type: "text",
      content: "Ya tenemos la aplicaci√≥n del frontend del backoffice en funcionamiento pero, tal como lo hab√≠amos planteado hasta ahora, a la hora de recuperar el listado de cursos lo hac√≠a solicit√°ndolo al contexto de Mooc, como parte de la deuda t√©cnica que hab√≠amos asumido en un momento inicial"
    },
    {
      type: "text",
      content: "Siguiendo la premisa de que estamos trabajando con DDD y que contamos con equipos organizacionales divididos por √°reas (Mooc, Backoffice‚Ä¶) entendemos que, aunque tengamos mecanismos para ello, no tiene sentido que desde el frontend de uno estemos llamando al backend de otro (Pensemos por ejemplo en los bloqueos que supondr√° si necesitamos que cambia algo de esa l√≥gica). Por eso decidimos pagar la deuda t√©cnica contra√≠da y crear el backend propio para Backoffice ü§ù"
    },
    {
      type: "text",
      content: "A nivel de estructura de carpetas no supondr√° ning√∫n cambio ya que al inicio del curso ya hab√≠amos dado de alta el contexto de backoffice, sin embargo si que hemos preparado la configuraci√≥n de BD para el contexto en esta clase BackofficeHibernateConfiguration que guardaremos en el m√≥dulo Shared del contexto"
    },
    {
      type: "text",
      content: "Este fichero de configuraci√≥n nos proveer√° de distintos servicios (transaction_manager, session_factory, data_source) para conectar a la BD, de modo que cualquier repositorio del contexto pueda acceder a ellos inyectando la dependencia. Tener la configuraci√≥n guardada de este modo nos da la ventaja de tener distintas conexiones a BD"
    },
    {
      type: "text",
      content: "Para evitar tener que copiar y pegar la configuraci√≥n para cada uno de estos ficheros hemos abstra√≠do la creaci√≥n de las instancias a la clase HibernateConfigurationFactory"
    },
    {
      type: "subtitle",
      content: "Clase MySqlCourseRepository:"
    },
    {
      type: "code",
      content: "@Transactional(\"mooc-transaction_manager\")\npublic class MySqlCourseRepository extends HibernateRepository<Course> implements CourseRepository {\n    public MySqlCourseRepository(@Qualifier(\"mooc-session_factory\") SessionFactory sessionFactory) {\n        super(sessionFactory, Course.class);\n    }\n}"
    },
    {
      type: "text",
      content: "En este punto es importante incidir en que al poder tener aplicaciones que carguen distintos contextos, tendremos que especificar que configuraci√≥n queremos cargar, como vemos en este repositorio del contexto de Mooc. Aunque esto nos obliga a a√±adir anotaciones de Springboot, al estar encapsulado dentro de la infraestructura, asumimos este 'mal menor' sin que nos pese tanto"
    },
    {
      type: "text",
      content: "Por otro lado y siguiendo unas buenas pr√°cticas, hemos sacado a par√°metros los datos de acceso a las distintas BD de la aplicaci√≥n (host, puerto, usuario‚Ä¶). En este caso lo hemos sacado a un fichero '.env', tal y como suele hacerse en entornos como Kubernetes, y hecho uso de la librer√≠a Dotenv para manejar este tipo de ficheros (Envuelto en nuestra clase Parameter)"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üìú Listado de cursos: Mantener proyecci√≥n de cursos en MySQL!"
    }
        
    ],
};