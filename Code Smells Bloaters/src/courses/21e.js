export default {
  title:
    "21e C√≥mo gestionar configuraci√≥n de infraestructura   Parameter Object",
  videoId: "1RmPww4wTXc",
  notes: [
    { type: "subtitle", content: "Del Explicit Arguments al Parameter Object" },
    { type: "text", content: "Pasar todos los atributos de configuraci√≥n disgregados no es la mejor soluci√≥n, por lo que el siguiente paso ser√° cohesionarlos dentro de un Parameter Object" },
    { type: "subtitle", content: "Implementaci√≥n con Parameter Object" },
    { type: "code", content: `export class MySqlUserRepository {
    constructor(config) {
        const Mysql     = require('sync-mysql');
        this.connection = new Mysql({
            host: config.host,
            user: config.user,
            password: config.password,
            database: config.database,
            port: config.port
        });
    }

    searchAll() {
        return this.connection.query('SELECT * FROM users');
    }
}` },
    { type: "text", content: "El DTO MySqlConfig que aglutina la configuraci√≥n de BD se llevar√° hasta el propio repositorio para establecer la conexi√≥n. Los valores de configuraci√≥n est√°n harcodeados en el DTO, pero podr√≠a escalarse para parsear valores desde un fichero yaml seg√∫n el entorno" },
    { type: "subtitle", content: "Consideraciones importantes" },
    { type: "text", content: "Si bien este paso permite compartir la configuraci√≥n de BD entre distintos repositorios, tambi√©n permite que estos sigan siendo los encargados de establecer la conexi√≥n a BD y conozcan la l√≥gica de instanciaci√≥n de la conexi√≥n üôÖ‚Äç‚ôÇÔ∏è" }
    ],
};
