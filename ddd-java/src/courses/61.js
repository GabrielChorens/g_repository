export default {
  title: "61 Implementacion con basic auth HTTP",
  videoId: "NCVBKIZqXIw",
  notes: [
    { type: "subtitle", content: "‚úã Implementaci√≥n con basic auth HTTP" },
    {
      type: "text",
      content: "Una vez visto a qu√© nos referimos cuando hablamos de Autenticaci√≥n y Autorizaci√≥n, y teniendo claro qu√© datos enviar al respecto en nuestros Eventos de Dominio, nos toca entrar en c√≥mo implementar√≠amos de forma sencilla Basic Auth HTTP üëÆ"
    },
    {
      type: "text",
      content: "Aunque en Spring Security ya contamos con un mecanismo de autenticaci√≥n b√°sica, vamos a prescindir de ella en vista a poder modelar en un futuro estos elementos en nuestro dominio. Por esta raz√≥n hemos llevado la l√≥gica a este middleware que, adem√°s, nos permitir√° tener un mayor control y testar esta pieza de nuestra aplicaci√≥n"
    },
    {
      type: "text",
      content: "Lo primero que debemos hacer es registrar este middleware (Filter en t√©rminos de Spring) asoci√°ndolo a los Path que decidamos, lo cual estableceremos dentro de la clase de configuraci√≥n BackofficeBackendServerConfiguration (Recordemos que la anotaci√≥n @Configuration nos permitir√° que el framework identifique la clase como una configuraci√≥n a cargar cuando levantemos la aplicaci√≥n)"
    },
    {
      type: "text",
      content: "Ser√° necesario que el middleware implemente la interface Filter de Spring para poder registrarlo, lo cual nos obligar√° a sobrescribir el m√©todo doFilter(). En este m√©todo ser√° donde llevemos a cabo la l√≥gica de nuestra autenticaci√≥n por lo que, en primer lugar, comprobaremos si la petici√≥n llega con la cabecera 'authorization'. En caso de que no se hayan enviado las credenciales, resetearemos la respuesta envi√°ndole un status 401-Unauthorized y las cabeceras correspondientes para que el usuario se autentique"
    },
    {
      type: "text",
      content: "En caso de que la petici√≥n si contuviera la cabecera, har√≠amos la decodificaci√≥n de la cabecera para extraer el usuario y contrase√±a para poder validar las credenciales. De ser v√°lidas, a√±adiremos en la request el usuario (por si lo necesitase el controller) y ejecutaremos el doFilter() para que la petici√≥n se siga ejecutando con normalidad. De lo contrario, pararemos la petici√≥n devolviendo un status 403-Forbidden"
    },
    {
      type: "text",
      content: "As√≠ tendr√≠amos una primera aproximaci√≥n bastante b√°sica que nos permitir√° no s√≥lo contar con una autenticaci√≥n funcional en nuestra aplicaci√≥n sino tambi√©n poder evolucionarla para a√±adirle posteriormente una mayor complejidad a nivel de modelado"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üëå Modelando el concepto \"Auth\"!"
    }
  ],
};
