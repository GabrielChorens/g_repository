export default {
  title: "64 Subscriber a todos los eventos",
  videoId: "euosXClrgy0",
  notes: [
    { type: "subtitle", content: "üëÇ Subscriber a todos los eventos" },
    {
      type: "text",
      content: "Una cuesti√≥n muy interesante que nos hab√©is planteado es c√≥mo har√≠amos para establecer un subscriptor que escuchase todos los eventos sin necesidad de incluirlos todos en de forma expl√≠cita en este subscriptor"
    },
    {
      type: "text", 
      content: "Esta casu√≠stica no se repetir√° en muchas ocasiones pero si que podemos encontrarla cuando queremos llevar a cabo acciones anal√≠ticas en nuestra aplicaci√≥n. Podr√≠amos registrar todo lo que sucede en ella y almacenarlo (Event Store) para luego explotarlo en gr√°ficas o consultas masivas üç≠"
    },
    {
      type: "subtitle",
      content: "Clase StoreDomainEventOnOccurred:"
    },
    {
      type: "code",
      content: "// ...\n@EventListener\npublic void on(DomainEvent event) {\n    AnalyticsDomainEventId id = new AnalyticsDomainEventId(event.eventId());\n    AnalyticsDomainEventAggregateId aggregateId = new AnalyticsDomainEventAggregateId(event.aggregateId());\n    AnalyticsDomainEventName name = new AnalyticsDomainEventName(event.eventName());\n    AnalyticsDomainEventBody body = new AnalyticsDomainEventBody(event.toPrimitives());\n\n    storer.store(id, aggregateId, name, body);\n}"
    },
    {
      type: "text",
      content: "Para recoger todos los eventos sin necesidad de a√±adir cada uno de ellos al subscriber (lo cual redundar√≠a en una violaci√≥n del OCP de SOLID) ser√° tan sencillo como indicarle que escuche la clase abstracta DomainEvent de la cual extienden todos nuestros eventos. As√≠, nuestras implementaciones de EventBus interpretar√°n esto como que debe pasarle cualquier clase que extienda de DomainEvent üôÜ‚Äç‚ôÇ"
    },
    {
      type: "text",
      content: "Por supuesto, orientarnos a este nivel de generalizaci√≥n con los eventos tambi√©n implica que no podremos hacer uso de ning√∫n m√©todo que sea espec√≠fico de un evento en concreto (Siempre podr√≠amos recurrir a hacer casting de los eventos comprobando la instancia concreta, pero estar√≠amos incurriendo precisamente en una violaci√≥n del OCP)"
    },
    {
      type: "text",
      content: "Finalmente, siguiendo el prop√≥sito que que coment√°bamos de alimentar un event store, enviar√≠amos los datos del evento al caso de uso donde persistir√≠amos el evento como un nuevo agregado en BD"
    },
    {
      type: "text",
      content: "Este flujo resulta super interesante ya que supone aprovechar los beneficios que ya ven√≠amos viendo durante el curso acerca de la publicaci√≥n de eventos para obtener un beneficio a√±adido como es el hecho de registrar todos los sucesos que tengan lugar en el universo de nuestra aplicaci√≥n con las amplias opciones de consumo que esto nos ofrece"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ü§ï Gesti√≥n de errores!"
    }
  ],
};
