export default {
  title: "39 Refactoring De Arquitectura Hexagonal a CQRS",
  videoId: "m5YUTxS93QU",
  notes: [
    { type: "subtitle", content: "‚ôªÔ∏è Refactoring De Arquitectura Hexagonal a CQRS" },
    {
      type: "text",
      content: "Una vez integrado nuestro CommandBus, vamos a refactorizar el flujo de nuestra aplicaci√≥n para, en lugar de llamar al caso de uso desde el controlador directamente, hacer que √©ste s√≥lamente conozca acerca del CommandBus y le env√≠e el comando en cuesti√≥n"
    },
    {
      type: "text",
      content: "Gracias a que en videos anteriores hab√≠amos preparado ya cierta abstracci√≥n al introducir nuestro propio objeto Request para comunicarnos con el caso de uso, los cambios a nivel del controlador ser√°n m√≠nimos(Ojo üëÄ no confundamos este Request que hab√≠amos creado nosotros con el que nos proporciona Spring y que el framework rellena autom√°ticamente con el body de la petici√≥n)"
    },
    {
      type: "text",
      content: "En t√©rminos de confianza con el refactor que llevemos a cabo cobra un papel super importante el hecho de que nuestros tests de aceptaci√≥n sigan pasando en verde una vez realizadas las modificaciones. Por otra parte, tendremos que realizar algunos cambios en los tests unitarios puesto que ahora el punto de entrada ya no ser√° el caso de uso sino el propio CommandHandler"
    },
    {
      type: "subtitle",
      content: "Clase CoursesPutController:"
    },
    {
      type: "code",
      content: "@RestController\npublic final class CoursesPutController {\n\n    public CoursesPutController(CommandBus commandBus) {\n        this.bus = bus;\n    }\n\n    @PutMapping(value = \"/courses/{id}\")\n    public ResponseEntity<String> index(\n        @PathVariable String id,\n        @RequestBody Request request\n    ) throws CommandHandlerExecutionError {\n        bus.dispatch(new CreateCourseCommand(id, request.name(), request.duration()));\n\n        return new ResponseEntity<>(HttpStatus.CREATED);\n    }\n    // ...\n}"
    },
    {
      type: "text",
      content: "Lo primero que haremos en nuestro Controller ser√° dejar de requerir el caso de uso tal como hac√≠amos inicialmente e inyectar v√≠a constructor el CommandBus. Tambi√©n modificaremos el objeto CreateCourseRequest para que sea un CreateCourseCommand que extienda de Command, esta herencia ser√° la que nos permita hacer el match entre Commands y CommandHandlers como vimos al inicio de esta lecci√≥n y, adem√°s, nos facilitar√° poder llevar a esta interface en un futuro cualquier informaci√≥n relativa a la capa de transporte que sea transversal a todos los comandos üë®‚Äçüëß‚Äçüë¶ Este CreateCourseCommand se lo enviaremos al dispatch() del CommandBus en el lugar en el que anteriormente llam√°bamos al caso de uso"
    },
    {
      type: "subtitle",
      content: "Clase CreateCourseCommandHandler:"
    },
    {
      type: "code",
      content: "@Service\npublic final class CreateCourseCommandHandler implements CommandHandler<CreateCourseCommand> {\n    //...\n\n    @Override\n    public void handle(CreateCourseCommand command) {\n        CourseId       id       = new CourseId(command.id());\n        CourseName     name     = new CourseName(command.name());\n        CourseDuration duration = new CourseDuration(command.duration());\n\n        creator.create(id, name, duration);\n    }\n}"
    },
    {
      type: "text",
      content: "Tendremos que crear por tanto el CreateCourseCommandHandler asociado a este Command (Recordemos que en el caso de los comandos, a diferencia de los eventos, queremos que siempre haya un handler para ejecutar la acci√≥n en cuesti√≥n), el cual le especificaremos al implementar la interface CommandHandler. El handle() de esta clase ser√° quien se encargue ahora de traducir los datos primitivos recibidos en el Command y pas√°rselos al caso de uso el cual ahora, en lugar de esperar un objeto Request, recibir√° los Value Objects propios de nuestro Dominio. Esta traducci√≥n a objetos de nuestro dominio es un 'lujo' que podemos permitirnos porque entendemos que el CommandHandler se encuentra ya dentro del subsistema y puede conocer el Dominio de nuestra aplicaci√≥n"
    },
    {
      type: "text",
      content: "Tal como vimos al inicio de la lecci√≥n en el momento de hacer el match Command-CommandHandler, tendremos que ir al container de la aplicaci√≥n para instanciar el CommandHandler, por lo que es importante que le a√±adamos a este la anotaci√≥n @Service para que desde el framework se a√±ada al container y podamos encontrarlo"
    },
    {
      type: "text",
      content: "A nivel de Tests Unitarios que nos ofrezcan la confianza de que todo siga funcionando correctamente tambi√©n tendremos que hacer algunas peque√±as modificaciones, y es que nuestro punto de entrada ya no ser√° el caso de uso en s√≠, sino el propio CommandHandler, por lo que ser√° √©ste el que instanciemos y, en lugar de generar un ObjectMother de nuestro CreateCourseRequest, lo haremos de CreateCourseCommand para pas√°rselo a ese CommandHandler en la llamada al m√©todo handle(). Finalmente, seguiremos validando que se ha persistido el curso en BD y que hemos publicado el correspondiente Evento de Dominio como ven√≠amos haciendo previamente"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üöé Integraci√≥n y refactor a Query Bus!"
    }
  ],
};
