export default {
  title: "67 Errores comunes",
  videoId: "QcC43vCfuxc",
  notes: [
    { type: "subtitle", content: "Errores comunes" },
    { type: "subtitle", content: "Eventos en lugar de comandos" },
    { type: "text", content: "Un error que a veces puede producirse es el hecho crear eventos de dominio que, en realidad, ser√≠an comandos. Como hemos visto en videos y cursos anteriores, los eventos de dominio son acciones inmutables que ya han sucedido (Ej. Usuario registrado), mientras que un comando denota la intenci√≥n de ejecutar una acci√≥n (Ej. Enviar email de bienvenida)" },
    { type: "text", content: "Al publicar un evento de tipo 'SendUserRegistrationEmailDomainEvent' estamos incurriendo en conocer desde el caso de uso primario las acciones derivadas de esta acci√≥n, y cada vez que queramos a√±adir una nueva acci√≥n derivada supondr√≠a tener que publicar un nuevo evento en el caso de uso primario, violando el principio OCP de SOLID. Lo que debemos de buscar entonces es que sean los subscriptores quienes conozcan del caso de uso primario y no al contrario" },
    { type: "subtitle", content: "Formato de eventos no estandarizados" },
    { type: "text", content: "Otro error con el que podemos encontrarnos es que en un proyecto grande con diferentes equipos de desarrollo, cada uno de ellos haya empezado a introducir los eventos de dominio sin un consenso previo en el que estandarizar el formato de estos (Ej. diferente formato json/xml o diferente estructura de la informaci√≥n‚Ä¶). Esto supondr√° no s√≥lo el trabajo de tener que parsear los eventos que vengan de una u otra aplicaci√≥n sino el riesgo de estar perdiendo informaci√≥n en los eventos üí¨" },
    { type: "text", content: "Por esta raz√≥n es muy importante pararnos a definir un standard global que todos los equipos sigan antes de ponernos a tirar c√≥digo y encontrarnos posteriormente con estos problemas" },
    { type: "subtitle", content: "Eventos gen√©ricos" },
    { type: "text", content: "Una cuesti√≥n importante que tambi√©n debemos tener en cuenta es la granularidad con la que vayamos a publicar eventos de dominio. Esto nos lleva a tener que optar bien por eventos m√°s gen√©ricos (Ej. UserChanged) o bien por eventos m√°s espec√≠ficos (Ej. UserRenamed, UserBanned‚Ä¶)" },
    { type: "text", content: "Es decir, aqu√≠ la decisi√≥n estar√≠a en si nos interesa m√°s publicar un √∫nico evento con m√°s datos y al que escuchen mas suscriptores o si nos interesa publicar m√∫ltiples eventos y que la suscripci√≥n a estos sea m√°s espec√≠fica ü§∑üèº‚Äç‚ôÇÔ∏è. Trabajar con unos eventos m√°s espec√≠ficos (y por tanto m√°s numerosos) nos evitar√° que los suscriptores tengan que hacer un an√°lisis previo del evento para saber si le interesa, pero este mayor n√∫mero de eventos tambi√©n supone un mayor coste en el sistema de colas utilizado para consumirlos" },
    { type: "subtitle", content: "Eventos de 'Ingenier√≠a'" },
    { type: "text", content: "Otro error con el que podemos encontrarnos es, tratando de registrar todo lo que sucede en nuestra aplicaci√≥n, publicar eventos de dominio sobre acciones que en realidad pertenecen a la propia infraestructura como no encontrar un registro en BD o no haber podido persistirlo. Estos escenarios no suponen una mutaci√≥n en nuestro universo de la aplicaci√≥n y deber√≠an registrarse m√°s bien mediante trazas de logs" },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    { type: "text", content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá" },
    { type: "text", content: "¬°Nos vemos en el siguiente video: üëÆ‚Äç‚ôÄÔ∏è Logging y Monitoring!" }
  ],
};
