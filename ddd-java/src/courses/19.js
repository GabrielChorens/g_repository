export default {
  title: "19 DeclaraciÃ³n de servicios desacoplados",
  videoId: "MfWRiwCegsU",
  notes: [
    { type: "subtitle", content: "DeclaraciÃ³n de servicios desacoplados" },
    {
      type: "text",
      content: "En este video le daremos una vuelta de tuerca mÃ¡s al tema de desacoplarnos lo mÃ¡ximo posible del framework en lo que respecta a las anotaciones (Gracias al aporte de @juanavilaes ðŸ™Œ) en nuestro Dominio"
    },
    { type: "subtitle", content: "AnotaciÃ³n Service (VersiÃ³n inicial):" },
    {
      type: "code",
      content: "@org.springframework.sterotype.Service\npublic @interface Service {}"
    },
    {
      type: "text",
      content: "En concreto, hasta ahora venÃ­amos utilizando una anotaciÃ³n propia con la que envolvÃ­amos la anotaciÃ³n Service de Spring ,utilizada para la inyecciÃ³n de servicios, de modo que quedase 'oculta' en el resto de clases donde tenÃ­amos que utilizarla (pero seguimos acoplados igualmente al framework â›“) y minimizara el impacto de la Infraestructura dentro de nuestro Dominio"
    },
    { type: "subtitle", content: "AnotaciÃ³n Service (VersiÃ³n actual):" },
    {
      type: "code",
      content: "@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Inherited\npublic @interface Service {\n}"
    },
    {
      type: "text",
      content: "Lo que hacemos es sustituir la anotaciÃ³n de Spring indicando que es una propia que se aplica sobre clases y es heredada, de modo que ya no usamos una pieza del framework sino del propio lenguaje Java de la cual tenemos control absoluto ðŸ‘Œ. Por otra parte tambiÃ©n tendremos que aÃ±adir ahora en nuestras clases de aplicaciÃ³n que incluya en los filtros aquellas clases que estÃ¡n anotadas con nuestro Service para declararlas como servicios"
    },
    { type: "subtitle", content: "Clase MoocBackendApplication:" },
    {
      type: "code",
      content: "@SpringBootApplication(exclude = HibernateJpaAutoConfiguration.class)\n@ComponentScan(\n    includeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Service.class),\n    value = {\"tv.codely.shared\", \"tv.codely.mooc\", \"tv.codely.apps.mooc.backend\"}\n)\npublic class MoocBackendApplication {\n    // ...\n}"
    },
    { type: "subtitle", content: "Â¿Alguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusiÃ³n mÃ¡s abajo ðŸ‘‡ðŸ‘‡ðŸ‘‡"
    },
    {
      type: "text",
      content: "Â¡Nos vemos en la siguiente lecciÃ³n: ðŸ‘¥ Hibernate y modelado del dominio!"
    }
  ],
};
