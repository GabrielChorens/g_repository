export default {
  title: "Code Smells Bloaters",
  firstVideoId: "uLbVpX0v0ts",
  folder: "Code Smells Bloaters",
  notes: [
    {
      type: "text",
      content:
        "Aprende a detectar y lidiar con c√≥digo incomprensible. Curso centrado en Code Smells de tipo Bloater (los que hacen que nuestros ficheros crezcan demasiado con exceso de l√≠neas y condicionales locos)",
    },
    {
      type: "subtitle",
      content: "¬øQu√© aprender√°s en este curso?",
    },
    {
      type: "text",
      content:
        "En este curso vamos a ver c√≥mo llevar a la pr√°ctica paso a paso con ejemplos en m√∫ltiples lenguajes de programaci√≥n c√≥mo conseguir programas de calidad aplicando buenas pr√°cticas de refactoring y c√≥digo limpio",
    },
    {
      type: "subtitle",
      content: "Contenido del curso",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Clean Code y Refactoring - ¬øQu√© aprender√°s en el curso?\n‚Ä¢ C√≥mo el propio c√≥digo t√©cnico Refactoring\n‚Ä¢ Muerte por deuda t√©cnica: ¬øCu√°ndo refactorizar? (Caso Extremo)\n‚Ä¢ Long method: Detecci√≥n, problemas y estado ideal\n‚Ä¢ Refactor Long Method: procedimientos y sus s√≠ntomas relacionados\n‚Ä¢ Agregado a un primitivo: Combinar trazas de programaci√≥n funcional\n‚Ä¢ Large Class: Detecci√≥n, problemas y estado ideal\n‚Ä¢ Qu√© Refactoring NO hacer: Un gran proyecto conlleva una gran responsabilidad\n‚Ä¢ Extract Class Refactoring: Encapsulando responsabilidades\n‚Ä¢ Cu√°ndo usar clases para representar datos y cu√°ndo no\n‚Ä¢ Replace Data Value with State/Strategy Refactoring: Respetando SOLID en tus modelos de dominio",
    },
    {
      type: "subtitle",
      content: "Long Parameter List Code Smell",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Reduciendo El Mundo Real‚Ñ¢: Introduce Parameter Object Refactoring para entidades con m√°s de 20 atributos\n‚Ä¢ C√≥mo gestionar par√°metros de aplicaci√≥n: Replace Parameter with Method Call Refactoring\n‚Ä¢ Preserve Whole Object Refactoring: Respetando lenguaje ubicuo",
    },
    {
      type: "subtitle",
      content: "Data Clumps Code Smell",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Comunicaci√≥n entre capas: Introduce Parameter Object Refactoring para objeto Request\n‚Ä¢ C√≥mo gestionar configuraci√≥n de infraestructura",
    },
    {
      type: "subtitle",
      content: "Complex Conditionals Code Smell",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Simplificando niveles de indentaci√≥n: Replace Nested Conditional with Guard Clauses Refactoring\n‚Ä¢ Simplificando niveles de indentaci√≥n: Replace Control Flag with Break Refactoring\n‚Ä¢ Simplificando l√≥gica de negocio: Replace Conditional with Polymorphism Refactoring\n‚Ä¢ Combinando Conditional & Consolidate Conditional Expression Refactoring\n‚Ä¢ Aprovechando informaci√≥n opcional: Introduce Null Object & Maybe Monad",
    },
    {
      type: "subtitle",
      content:
        "Ejemplos pr√°cticos para El Mundo Real‚Ñ¢: ¬°√ösalos los gestos! ü§ò ü§ü ‚úåÔ∏è ü§ô üëä üòé",
    },
    {
      type: "text",
      content:
        "‚Ä¢ Qu√© pasa cuando no hay datos: JavaScript te mira a ti\n‚Ä¢ An√°lisis de vuestros ejemplos",
    },
    {
      type: "subtitle",
      content: "Conclusiones y siguientes pasos",
    },
    {
      type: "text",
      content: "‚Ä¢ Conclusiones y siguientes pasos",
    },
    {
      type: "named_link",
      text: "Repositorio del curso",
      url: "https://github.com/CodelyTV/refactoring-code_smells-design_patterns",
    },
  ],
};
