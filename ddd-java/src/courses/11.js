export default {
  title: "11 Value Objects Immutabilidad y tips para agilizar desarrollo",
  videoId: "L0U1FQrB6Kw",
  notes: [
    { type: "subtitle", content: "Value Objects: Inmutabilidad y tips para agilizar desarrollo" },
    {
      type: "text",
      content: "Ya que hemos visto c√≥mo pasar nuestros identificadores a Value Objects, terminaremos esta lecci√≥n siguiendo los mismos pasos con los dem√°s atributos de nuestro Curso, a√±adi√©ndoles mayor sem√°ntica y permitiendo llevar a estos la l√≥gica de validaci√≥n."
    },
    {
      type: "text", 
      content: "A diferencia del UUID, que nos interesa mantener compartido dentro del Shared Kernel al tratarse de una pieza que usaremos en la comunicaci√≥n entre distintos m√≥dulos y contextos, querremos que los atributos CourseId y CourseDuration se mantengan dentro del m√≥dulo y evitar compartir su l√≥gica. Ya que tendremos m√∫ltiples Value Objects en cada Bounded Context, nos va a interesar que su creaci√≥n sea un proceso √°gil üèÉ"
    },
    { type: "subtitle", content: "Clase CourseName:" },
    {
      type: "code",
      content: "public final class CourseName extends StringValueObject {\n    public CourseName(String value) {\n        super(value);\n    }\n\n}"
    },
    {
      type: "text",
      content: "El modificar directamente los argumentos que recib√≠a el agregado Course de Strings a Value Objects y permitir que sea el propio IDE quien nos ayude a generar estas clases va a facilitarnos mucho la tarea, pero por supuesto es algo abierto al gusto de cada uno"
    },
    {
      type: "text",
      content: "Ambos Value Objects encapsulan un atributo de tipo String, as√≠ que tal como vimos en el caso del UUID, tambi√©n nos interesar√° hacer uso de la herencia y que extiendan de una clase padre StringValueObject En este caso no le vemos tanto sentido a extraerlo a un servicio y hacer uso de la composici√≥n (puesto que no tocamos Entrada/Salida de datos ni tratamos de abstraernos de algo que pueda cambiar en el futuro). Ser√° interesante igualmente este tipo de jerarqu√≠a con otros Value Objects de distinto tipo (ej: IntValueObject)"
    },
    {
      type: "text",
      content: "La clase StringValueObject nos encapsular√° tanto la validaci√≥n de que estamos recibiendo realmente un valor de tipo String como la implementaci√≥n del m√©todo equals() que podremos utilizar para comparar por valores como ve√≠amos previamente en los tests"
    },
    {
      type: "text",
      content: "Al modificar el tipo de par√°metros que recibe Course tendremos que modificar tambi√©n aquellos puntos en nuestros tests donde estuvi√©ramos instanciando esta clase, veremos en el siguiente video c√≥mo hacer que nuestros tests sean menos fr√°giles a este tipo de cambios"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en la siguiente lecci√≥n: ‚úÖ Modelando el dominio: Implicaciones en tests!"
    }
  ],
};
