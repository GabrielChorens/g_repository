export default {
  title:
    "22 Simplificando niveles de indentaci√≥n Replace Nested Conditional with Guard Clauses Refactoring",
  videoId: "9OY4pKfwiRA",
  notes: [
    { type: "subtitle", content: "Complex Conditionals y Cl√°usulas de Guarda" },
    { type: "text", content: "Uno de los code smells que m√°s frecuentemente vamos a encontrar y que m√°s nos pueden dificultar la comprensi√≥n del c√≥digo son los Complex Conditionals, y entre las estrategias que tenemos para simplificar los niveles de identaci√≥n generados en estos casos est√° el uso de Cl√°usulas de Guarda" },
    { type: "subtitle", content: "Ejemplo: StudentGradeCalculator" },
    { type: "text", content: "Para ver los beneficios que aporta esta t√©cnica retomaremos el ejemplo que vimos en lecciones anteriores sobre la clase StudentGradeCalculator" },
    { type: "subtitle", content: "Estado inicial" },
    { type: "code", content: `public float calculateGrades(final List<Pair<Integer, Float>> examsGrades, final boolean hasReachedMinimumClasses) {
    if (!examsGrades.isEmpty()) {
        float gradesSum       = gradesSum(examsGrades);
        int   gradesWeightSum = gradesWeightSum(examsGrades);

        if (gradesWeightSum == 100) {
            if (hasReachedMinimumClasses) {
                if (hasToIncreaseOneExtraPoint()) {
                    return Float.min(10f, gradesSum + 1);
                } else {
                    return gradesSum;
                }
            } else {
                return 0f;
            }
        } else if (gradesWeightSum > 100) {
            return -1f;
        } else {
            return -2f;
        }
    } else {
        return 0f;
    }
}` },
    { type: "text", content: "Este m√©todo recibe el listado de pares peso-nota junto a la indicaci√≥n de si el alumno ha asistido al m√≠nimo de clases exigido y en base a esto calculaba la nota final del alumno" },
    { type: "text", content: "Como se puede apreciar, existe una gran complejidad en t√©rminos de niveles de identaci√≥n que nos van a dificultar enormemente seguir mentalmente las condiciones que se est√°n cumpliendo a cada nivel que nos adentramos, pero es que, adem√°s, toda la l√≥gica relativa a la gesti√≥n de errores est√° tan lejos del punto donde se eval√∫a esa l√≥gica, que la visibilidad sobre donde proviene esa salida es tremendamente reducida üî≠" },
    { type: "subtitle", content: "Aplicando Cl√°usulas de Guarda" },
    { type: "text", content: "Aunque generalmente las cl√°usulas de guarda se establecen para gestionar casos excepcionales (lanzamiento de excepciones), en este caso vamos a utilizarla para controlar un caso completamente v√°lido como es el hecho de que un alumno no haya asistido a clase." },
    { type: "subtitle", content: "Invirtiendo el condicional" },
    { type: "code", content: `public float calculateGrades(final List<Pair<Integer, Float>> examsGrades, final boolean hasReachedMinimumClasses) {
    if(examsGrades.isEmpty()){
      return 0f;
    }
    } else {
        float gradesSum       = gradesSum(examsGrades);
        int   gradesWeightSum = gradesWeightSum(examsGrades);

        if (gradesWeightSum == 100) {
          // more...
}` },
    { type: "text", content: "Lo primero que haremos ser√° invertir la condici√≥n del bloque IF gracias a la ayuda del propio IDE (pulsando Alt + Intro sobre el if) para traernos arriba el comportamiento que antes estaba asociado al else" },
    { type: "subtitle", content: "Eliminando else redundante" },
    { type: "code", content: `public float calculateGrades(final List<Pair<Integer, Float>> examsGrades, final boolean hasReachedMinimumClasses) {
    if(examsGrades.isEmpty()){
      return 0f;
    }

    float gradesSum       = gradesSum(examsGrades);
    int   gradesWeightSum = gradesWeightSum(examsGrades);

    if (gradesWeightSum == 100) {
      // more...
}` },
    { type: "text", content: "Al existir un return dentro del bloque if que rompe con el flujo, tenemos la certeza de que s√≥lo entrar√° en el resto del c√≥digo si no ha entrado previamente en el if, por lo que carece de sentido mantener la identaci√≥n del else y podemos as√≠ eliminarla, simplificando nuestro c√≥digo üëå" },
    { type: "text", content: "Cabe se√±alar que el hecho de tener m√∫ltiples puntos de retorno no debe entenderse necesariamente como mala pr√°ctica, aunque en lenguajes como BASIC o Pascal fuera algo que conven√≠a evitar, hoy en d√≠a en la mayor√≠a de lenguajes es un leak de cara a la m√°quina m√°s que superado y que no deber√≠a de imponerse por encima de la legibilidad y la eficiencia de cara al humano ü§ñüë©‚Äçüíª" },
    { type: "subtitle", content: "Reduciendo a√∫n m√°s los niveles de identaci√≥n" },
    { type: "code", content: `public float calculateGrades(final List<Pair<Integer, Float>> examsGrades, final boolean hasReachedMinimumClasses) {
    // more...
    if (gradesWeightSum != 100) {
      if (gradesWeightSum > 100) {
              return -1f;
          } else {
              return -2f;
          }
    }
    if (hasReachedMinimumClasses) {
            if (hasToIncreaseOneExtraPoint()) {
                return Float.min(10f, gradesSum + 1);
            } else {
                return gradesSum;
            }
        } else {
            return 0f;
        }
}` },
    { type: "text", content: "En el caso de la l√≥gica vinculada a gradesWeightSum nos encontramos que tenemos que adem√°s de validar si el valor es correcto, tenemos un bloque else if y else para los casos contrarios (corner cases) tanto por encima como por debajo, pero de nuevo podremos invertir el condicional y, puesto que ambos corner cases ejecutar√°n un return, nuevamente podremos ahorrarnos la identaci√≥n del else üôå" },
    { type: "text", content: "Una vez aplicadas todas las cl√°usulas de guarda, vemos c√≥mo no existe m√°s de un nivel de identaci√≥n dentro de los bloques if y la l√≥gica de este c√°lculo de notas del estudiante se encuentra en este primer nivel y no al final de una serie de condicionales encadenados, lo cual hace que sea sumamente f√°cil de leer y comprender" },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    { type: "text", content: "Si tienes alguna duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá" },
    { type: "text", content: "¬°Nos vemos en el siguiente video: ‚õìÔ∏è Simplificando niveles de indentaci√≥n: Replace Control Flag with Break Refactoring!" },
  ],
};
