export default {
  title: "18 Preserve Whole Object Refactoring Respetando lenguaje ubicuo",
  videoId: "1NLoNlqOxss",
  notes: [
    {
      type: "text",
      content: "Aunque hemos mejorado nuestra clase Booking con respecto al estado inicial y la firma del constructor ya no tiene una lista inmensa de par√°metros, lo cierto es que a√∫n hay cosas que nos huelen mal, como el hecho de seguir teniendo toda una lista de atributos de clase disgregados"
    },
    {
      type: "text",
      content: "Si desde fuera estamos recibiendo un objeto DateRange bien cohesionado ¬øPor qu√© desdoblarlo para asignar los valores a startDate y endDate? ¬øPor qu√© no preservar ese objeto y llevarnos ahi la l√≥gica de negocio vinculada hasta ahora a esos atributos? üß≤"
    },
    {
      type: "text",
      content: "El objetivo entonces ser√° dejar los mismos atributos de clase que los recibidos en el constructor. Por supuesto existen diferentes enfoques que podr√≠amos seguir para llevar a cabo este proceso de refactor dentro del planteamiento de 'parallel changes' que hemos venido comentando en los videos anteriores y que tendremos en cuenta"
    },
    {
      type: "text",
      content: "Una primera aproximaci√≥n ser√≠a seguir con el mismo proceso que vimos en los videos anteriores al refactorizar el constructor: A√±adir los nuevos atributos (En este caso Customer, DateRange, Tax‚Ä¶) al tiempo que mantenemos los antiguos"
    },
    {
      type: "text",
      content: "Clase Booking (primer enfoque):"
    },
    {
      type: "code",
      content: `public final class Booking {
    private final BookingId     id;
    private final LocalDateTime startDate;
    private final LocalDateTime endDate;
    private final CustomerId    customerId;
    private final CustomerName  customerName;
    private final EmailAddress  customerEmail;
    private final Customer      customer;
    // more...

    public Booking(
        BookingId id,
        DateRange bookingDateRange
        Customer customer
        BookingType bookingType,
        DiscountType discountType,
        DiscountValue discountValue,
        TaxType taxType,
        TaxValue taxValue
    ) {
        this.id            = id;
        this.startDate     = bookingDateRange.startDate();
        this.endDate       = bookingDateRange.endDate();
        this.customerId    = customer.id();
        this.customerName  = customer.name();
        this.customerEmail = customer.emailAdress();
        this.customer      = customer;
        // more...
    }`
    },
    {
      type: "text",
      content: "As√≠, estar√≠amos guard√°ndonos desde el constructor tanto los distintos atributos que ten√≠amos disgregados en Booking como el objeto Customer al completo."
    },
    {
      type: "text",
      content: "El problema que conlleva este procedimiento es el alto riesgo de dejarnos olvidado sin actualizar cualquiera de los sitios en nuestra aplicaci√≥n donde se est√© alterando el estado de los atributos internos de este Customer, es decir, la complejidad que nos genere puede llegar a ser mayor que los beneficios que nos aporte ü§¶‚Äç‚ôÇÔ∏è"
    },
    {
      type: "text",
      content: "Clase Booking (segundo enfoque):"
    },
    {
      type: "code",
      content: `public final class Booking {
    private final BookingId   id;
    private final DateRange   period;
    private final Customer    customer;
    private final Discount    discount;
    private final Tax         tax;

    public Booking(
        BookingId id,
        DateRange period
        Customer customer
        BookingType bookingType,
        Discount discount,
        Tax tax
    ) {
        this.id         = id;
        this.period     = period;
        this.customer   = customer;
        // more...
    }`
    },
    {
      type: "text",
      content: "Por otro lado, pensamos que una aproximaci√≥n m√°s directa puede ser m√°s interesante en estos casos: Una vez introducido como atributo el propio objeto Customer, eliminar los atributos relacionados que inicialmente ten√≠amos disgregados (customerId, customerName‚Ä¶). Por supuesto nos encantar√≠a que compartierais vuestra visi√≥n al respecto abriendo una discusi√≥n abajo üëáüëá"
    },
    {
      type: "text",
      content: "Clase Booking (sustituyendo atributos):"
    },
    {
      type: "code",
      content: `public final class Booking {

    // more...

    public BookingStatus statusFor(LocalDateTime date) {
        if (date.isBefore(period.startDate())) {
            return BookingStatus.NOT_STARTED;
        }

        if (date.isAfter(period.startDate()) && date.isBefore(period.endDate())) {
            return BookingStatus.ACTIVE;
        }

        return BookingStatus.FINISHED;
    }
}`
    },
    {
      type: "text",
      content: "Una vez simplificado la lista de atributos, ya s√≥lo nos quedar√° sustituir aquellos lugares donde el propio IDE ya nos estar√° indicando la ausencia del atributo por la llamada al getter desde nuestro objeto ‚ôªÔ∏è Aqu√≠ nos puede estar chirriando a√∫n mantener en Booking toda la l√≥gica que tenemos en statusFor() para comprobar el estado de la reserva en base a la fecha indicada, pero m√°s adelante pasaremos a empujarla a√∫n m√°s al fondo ü§ó"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes cualquier duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el pr√≥ximo video: üìû Tell don't ask: Fomentando la cohesi√≥n!"
    }
  ],
};
