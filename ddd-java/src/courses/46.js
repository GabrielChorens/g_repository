export default {
  title: "46 Crear curso Formulario y command desde Controller",
  videoId: "LdD_czXn79o",
  notes: [
    { type: "subtitle", content: "‚úåÔ∏è Crear curso Formulario y command desde Controller" },
    {
      type: "text",
      content: "Visto c√≥mo recuperar datos v√≠a QueryBus para plasmarlos en la template, lo siguiente que queremos poder hacer es enviar datos desde √©sta para crear un nuevo recurso v√≠a CommandBus"
    },
    {
      type: "text", 
      content: "El objetivo en este caso es poder crear un nuevo Curso a trav√©s de un formulario en la web, lo cual indirectamente implicar√° que se incremente el contador que vimos en el video anterior"
    },
    {
      type: "text",
      content: "Una primera consideraci√≥n relativa a DDD es el hecho de que estamos enviando el identificador del curso desde el formulario, es decir, como ya hemos hablado anteriormente cuando ve√≠amos CQRS ser√° el cliente quien tenga la responsabilidad de generar y pasar el identificador del recurso al controlador (aunque generalmente ser√° algo que permanezca invisible de cara al usuario)"
    },
    {
      type: "text",
      content: "Por otro lado, otra consideraci√≥n importante es que estaremos forzando que se refresque üîÑ la p√°gina una vez enviado el formulario a fin de evitar que el usuario pueda volver a enviar los mismos datos de nuevo al ser √©l quien la refresque"
    },
    {
      type: "subtitle",
      content: "Clase CoursesPostWebController:"
    },
    {
      type: "code",
      content: "@PostMapping(value = \"/courses\", consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\npublic RedirectView index(@RequestParam Map<String, String> request) throws Exception {\n    bus.dispatch(new CreateCourseCommand(request.get(\"id\"), request.get(\"name\"), request.get(\"duration\")));\n\n    return new RedirectView(\"/courses\");\n}"
    },
    {
      type: "text",
      content: "Puesto que los navegadores no entienden de comunicaci√≥n v√≠a PUT, aunque le estemos enviando el identificador, hemos creado un controlador para el m√©todo POST que ser√° el encargado de recibir la petici√≥n. En este caso adem√°s lo que devolveremos no ser√° un ModelAndView sino un RedirectView que fuerce a la redirecci√≥n una vez terminado lo que tengamos que hacer internamente"
    },
    {
      type: "text",
      content: "Otro detalle de este endpoint es que vamos a especificar que lo que va a recibir no es un objeto Json sino un formulario, el cual igualmente mapear√° a un RequestParam del cual podremos recuperar los atributos (sin tipar)"
    },
    {
      type: "text",
      content: "Con los atributos recuperados de la request instanciaremos un nuevo CreateCourseCommand que mandaremos al bus sin esperar ninguna otra respuesta. No obstante, en este punto nos estaremos comiendo errores como el no recibir todos los par√°metros necesarios, por lo que ser√° necesario a√±adir validaciones üëÆ que nos prevengan y avisen de este tipo de errors"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ü§∑‚Äç‚ôÄÔ∏è Crear curso D√≥nde ubicar validaciones de comandos!"
    }
  ],
};
