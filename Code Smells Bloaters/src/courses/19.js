export default {
  title: "19 Tell dont ask Fomentando la cohesi√≥n",
  videoId: "Z5YVXxZafKY",
  notes: [
    {
      type: "text",
      content: "Con el refactoring aplicado hasta ahora hemos conseguido despejar el terreno y facilitar el poder empujar la l√≥gica de negocio que a√∫n nos segu√≠a chirriando en la clase Booking, con lo que aplicaremos 'Tell Don't Ask': Dime que lo quieres pero no preguntes por mis datos internos ü§ê"
    },
    {
      type: "text", 
      content: "Clase Booking (estado inicial):"
    },
    {
      type: "code",
      content: `public final class Booking {
    // more...

    public BookingStatus statusFor(LocalDateTime date) {
        if (date.isBefore(period.startDate())) {
            return BookingStatus.NOT_STARTED;
        }

        if (date.isAfter(period.startDate()) && date.isBefore(period.endDate())) {
            return BookingStatus.ACTIVE;
        }

        return BookingStatus.FINISHED;
    }
}`
    },
    {
      type: "text",
      content: "Como pod√≠amos ver en los videos anteriores, el m√©todo statusFor() de la clase Booking nos devolver√° el estado de una reserva en base a la comprobaci√≥n de la fecha que reciba por par√°metro y los atributos de fecha de inicio/fin del periodo almacenado."
    },
    {
      type: "text",
      content: "Nuestro objetivo ser√° mover esa l√≥gica interna hacia la clase DateRange, pero tal y como est√°n definidos los condicionales vemos que todo gira en torno al argumento de entrada, lo cual nos va a complicar este desplazamiento ¬øQu√© podemos hacer? Tan sencillo como invertir las condiciones para que la l√≥gica gire alrededor de la clase que nosotros mismos hemos modelado üôå"
    },
    {
      type: "text",
      content: "Clase Booking (invirtiendo condicionales):"
    },
    {
      type: "code",
      content: `public final class Booking {
    // more...

    public BookingStatus statusFor(LocalDateTime date) {
        if (period.startDate().isAfter(date)) {
            return BookingStatus.NOT_STARTED;
        }

        if (period.startDate().isBefore(date) && period.endDate().isAfter(date)) {
            return BookingStatus.ACTIVE;
        }

        return BookingStatus.FINISHED;
    }
}`
    },
    {
      type: "text",
      content: "Con esta primera iteraci√≥n, aunque estamos evitando lanzar la consulta a ese date que recibimos por par√°metro para lanz√°rsela a nuestro propio DateRange, seguimos violando Tell Don't Ask: La clase Booking es la que est√° pidiendo los datos al atributo period (DateRange) para realizar su c√°lculo. Adem√°s, se hace bastante evidente tambi√©n que estar√≠amos violando la Ley de Demeter (no hablemos con desconocidos), ya que desde Booking s√≥lo deber√≠amos interactuar con DateRange y no con otros elemenos m√°s distantes como sus atributos internos (Ojo al code smell chain method call üëÉ)"
    },
    {
      type: "text",
      content: "De cualquier modo, a√∫n con estas contraprestaciones, hemos dado un paso hacia adelante y facilitado el poder llevarnos esta l√≥gica dentro de la clase DateRange. Tal como hicimos en otros procesos de refactoring previos, lo haremos en dos pasos:"
    },
    {
      type: "text",
      content: "üç¥ Extraer la l√≥gica a un m√©todo de la propia clase Booking\nüöõ Mover este m√©todo dentro de la clase DateRange"
    },
    {
      type: "text",
      content: "Clase Booking (invirtiendo condicionales):"
    },
    {
      type: "code",
      content: `public final class Booking {
    // more...

    public BookingStatus statusFor(LocalDateTime date) {
        if (hasStarted(date)) {
            return BookingStatus.NOT_STARTED;
        }

        if (period.startDate().isBefore(date) && period.endDate().isAfter(date)) {
            return BookingStatus.ACTIVE;
        }

        return BookingStatus.FINISHED;
    }

      private boolean hasStarted(LocalDateTime date){
          return period.startDate().isAfter(date)
      }
}`
    },
    {
      type: "text",
      content: "A la hora de aprovechar el IDE para ayudarnos a aplicar este refactor es importante comprobar que el m√©todo extra√≠do no sea definido como est√°tico, puesto que precisamente queremos que funcione en torno a los datos de esa instancia concreta y que no tengamos que pasarle la instancia como argumento. Igualmente tampoco queremos que el DateRange se pase como argumento üôÖ‚Äç‚ôÄÔ∏è"
    },
    {
      type: "text",
      content: "Clase DateRange:"
    },
    {
      type: "code",
      content: `public final class DateRange {

    // more...

    public boolean isBetween(LocalDateTime date) {
        return date.isAfter(startDate) && date.isBefore(endDate);
    }

    public boolean isAfter(LocalDateTime date) {
        return date.isBefore(startDate);
    }
}`
    },
    {
      type: "text",
      content: "Ahora ya si podemos empujar la l√≥gica dentro de la clase DateRange, de modo que la clase Booking se limitar√° a pedir conocer si la fecha dada es anterior o est√° dentro de ese rango, sin tener que interactuar con sus datos internos. Con esto tambi√©n ganamos la posibilidad de ahorrarnos los getters que hasta ahora ven√≠amos necesitando para startDate y endDate puesto que ya no necesitamos acceder a estos datos desde fuera de la clase üëå"
    },
    {
      type: "text",
      content: "En este caso, DateRange es una clase compartida en nuestro sistema porque la l√≥gica que recoge es bastante general y podemos ver que la sem√°ntica es m√°s abstracta, pero si vieramos la necesidad de empujar aqu√≠ dentro cosas m√°s espec√≠ficas relativas al contexto de la reserva, lo que har√≠amos es crear una clase que encapsulara √©sta (composici√≥n sobre herencia) y llevarnos ah√≠ esas l√≥gicas particulares"
    },
    {
      type: "subtitle",
      content: "¬øAlguna Duda?"
    },
    {
      type: "text",
      content: "Si tienes cualquier duda sobre el contenido del video o te apetece compartir cualquier sugerencia recuerda que puedes en abrir una nueva discusi√≥n justo aqu√≠ abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚öôÔ∏è C√≥mo gestionar par√°metros de aplicaci√≥n: Replace Parameter with Method!"
    }
  ],
};
