export default {
  title: "10 Refactoring a UUIDs como identificadores",
  videoId: "CQzt9kIi7X0",
  notes: [
    { type: "subtitle", content: "UUIDs como Identificadores" },
    {
      type: "text",
      content: "Antes de entrar a ver c√≥mo llevamos a cabo el modelado de los identificadores os recomendamos encarecidamente que hay√°is visto el curso de CQRS, donde dedicamos una lecci√≥n exclus√≠vamente dedicada a explicar por qu√© pasar los identificadores desde el cliente. Con este punto de partida asumimos que lo que esperamos ser√° entonces recibir estos identificadores en formato UUIDs"
    },
    {
      type: "text", 
      content: "El objetivo entonces es crear nuestro primer Value Object CourseId, el cual nos permitir√° poner una capa por encima a la propia clase UUID de Java y en la cual podremos modelar y asegurarnos de que cumple con el formato que queremos"
    },
    {
      type: "text",
      content: "El lenguaje Java nos provee de una clase UUID propia con un conjunto importante de m√©todos que nos facilitar√°n bastante la vida, ejemplo de ello es el m√©todo fromString(), que podremos usar a modo de named constructor para crear instancias de UUID en base a un String"
    },
    {
      type: "text",
      content: "Para ser consistentes con nuestra API, nuestro Value Object tendr√° un atributo 'value' que definiremos como privado y de tipo String. Este atributo s√≥lo se asigna desde el constructor y √∫nicamente despu√©s de haber pasado una cl√°usula de guarda que nos garantice que cumple con nuestro formato. Es aqu√≠, en esta cl√°usula, donde aprovecharemos el fromString() del UUID de Java, que lanza una excepci√≥n cuando el String que le pasamos no es v√°lido"
    },
    { type: "subtitle", content: "Clase Identifier (Resultado final):" },
    {
      type: "code",
      content: "public abstract class Identifier implements Serializable {\n    final protected String value;\n\n    public Identifier(String value) {\n        ensureValidUuid(value);\n\n        this.value = value;\n    }\n\n    protected Identifier() {\n        this.value = null;\n    }\n\n    public String value() {\n        return value;\n    }\n\n    private void ensureValidUuid(String value) throws IllegalArgumentException {\n        UUID.fromString(value);\n    }\n\n    // ... \n}"
    },
    {
      type: "text",
      content: "Puesto que se trata de un patr√≥n que va a repetirse en los identificadores de nuestros agregados, lo que haremos ser√° sacar esta l√≥gica a una clase abstracta Identifier en la carpeta Shared que ahora implementar√° nuestro CourseId (En el resultado final de esta clase, se ha a√±adido la interface Serializable para poder serializarla a formato Json)"
    },
    {
      type: "text",
      content: "El hecho de que el atributo de clase sea un String y no directamente un UUID puede ser objeto de discusi√≥n y al final es algo que debe consensuar el equipo, pero si que es importante el hecho de evitar filtraciones de los detalles de la implementaci√≥n, es decir, debemos evitar exponer (en el getter o el constructor de la clase) el tipo de datos que estamos wrappeando y en su lugar trabajar con datos primitivos tanto a la entrada como a la salida. Adem√°s, encapsular estos detalles nos facilitar√° much√≠simo el trabajo si en alg√∫n momento tuvi√©ramos la necesidad de modificarlos"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: üßû‚Äç‚ôÇÔ∏è Value Objects: Immutabilidad y tips para agilizar desarrollo!"
    }
  ],
};
