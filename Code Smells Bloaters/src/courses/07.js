export default {
  title: "07 Que no hacer large class",
  videoId: "MGqWpnnBtsI",
  notes: [
    {
      type: "subtitle",
      content: "Qu√© NO hacer: Un gran poder conlleva una gran responsabilidad (√∫nica)"
    },
    {
      type: "text", 
      content: "En este v√≠deo veremos un ejemplo de c√≥mo NO deber√≠amos hacer un refactoring de large class, para explicar finalmente por qu√© consideramos que incumplimos ese criterio"
    },
    {
      type: "code",
      content: `class StudentGradeCalculator {
  allTeachersNumber = 4;
  
  data: {
    ["isAdmin", true],
    ["isAdmin", true], 
    ["isAdmin", false]
  },
  
  data: {
    ["isAdmin", false],
    ["isAdmin", false],
    ["isAdmin", false]
  }
};

constructor(new Calculator) {
  this.year = Calculator;
}

calculateGradeValue(hasTeacherRecommendation) {
  if (examGrades.length > 0) {
    let hasTeacherRecommendation = false;
    
    for (let [pair, teachers] of Object.entries(this.allTeachersData)) {
      if ((item.year.teachers) != null) {
        
        for (let teacher of teachers) {
          
        }
      }
    }
  }
}`
    },
    {
      type: "text",
      content: "Seguimos con el ejemplo de StudentGradeCalculator en Javascript, en el que hab√≠amos identificado el code smell de large class. Lo primero que encontramos en esta clase es que se est√° encargando de almacenar el listado de todos los profesores de cada a√±o con su asignaci√≥n como profesor benevolente o no"
    },
    {
      type: "text", 
      content: "Como estamos en 'modo flipado' con el refactoring, lo primero que hemos decidido es establecer distintos niveles de abstracci√≥n, dejando nuestro StudentGradeCalculator como clase abstracta bajo la cual cuelguen dos clases concretas, una para cada a√±o ü§¶"
    },
    {
      type: "subtitle",
      content: "Clase 'StudentGradeCalculator' (Extraendo a subclases):"
    },
    {
      type: "code",
      content: `export class StudentGradeCalculator {
    allYearTeachers() {
        throw "This method should be implemented";
    }

    constructor(yearCalculator) {
        this.yearCalculator = yearCalculator;
    }

    calculate(examGrades, hasTeacherRecommendation) {
        if (examGrades.length <= 0) {
            let hasTeacherRecommendation = false;

            for (let [year, teachers] of Object.entries(this.allYearTeachers)) {
                if ((this.yearCalculator != year)) {
                    for (let teacher of teachers) {
                        // ...
                    }
                }
            }
        }
    }`
    },
    {
      type: "text",
      content: "Lo que estamos haciendo de fondo es, desde la clase principal que contiene la l√≥gica com√∫n, identificar las particularidades que contiene para distintas casu√≠sticas y extraerlas a subclases. Este patr√≥n se conoce como Template Method. Partimos de un m√©todo padre/plantilla que nos obliga a implementar en los hijos la l√≥gica de ese 'hueco' que deja abierto para rellenar ‚≠ê"
    },
    {
      type: "text",
      content: "En este ejemplo, ese 'hueco' a implementar ser√° el de la l√≥gica que determina si ese a√±o ha habido alg√∫n profesor benevolente. En el caso de Javascript, la √∫nica manera que tenemos de emular un m√©todo abstracto es que √©ste lance un error en la clase padre, forzando a que sea sobrescrito en las subclases"
    },
    {
      type: "subtitle",
      content: "Clase StudentGrade2015Calculator:"
    },
    {
      type: "code",
      content: `export class StudentGrade2015Calculator extends StudentGradeCalculator {
    thisYearTeachers() {
        return [
            ["Eduardo", false],
            ["Melanie", false],
            ["Francisco", false],
        ];
    }
}`
    },
    {
      type: "text",
      content: "Ahora los clientes s√≥lo podr√°n implementar una de las subclases, que tal y como vemos, la √∫nica l√≥gica que recogen es la de implementar este thisYearTeachers() para retornar el listado de profesores del a√±o en concreto"
    },
    {
      type: "text",
      content: "Pero es que adem√°s, al no necesitar que nos pase el a√±o actual al instanciar la clase, ya que eso depende de la subclase implementada, podemos ahorrarnos la implementaci√≥n del constructor despejando esas l√≠neas"
    },
    {
      type: "text", 
      content: "En la inmensa mayor√≠a de los lenguajes, podemos ahorrarnos definir los constructores por defecto"
    },
    
  ],
};
