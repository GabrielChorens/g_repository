export default {
  title: "38 Integracion de Command y Query Bus",
  videoId: "sYqDtqIuP1s",
  notes: [
    { type: "subtitle", content: "üöå Integraci√≥n de Command y Query Bus" },
    {
      type: "text",
      content: "Antes de comenzar este nuevo bloque os recomendamos encarecidamente haber visto los cursos de CQRS y DDD Aplicado ya que daremos por comprendidos muchos conceptos y asumiremos que se trata de un contexto donde es beneficioso su uso para poder focalizarnos en su implementaci√≥n en nuestra arquitectura en Java"
    },
    {
      type: "text", 
      content: "La implementaci√≥n que haremos de nuestros CommandBus y QueryBus ser√° muy similar a lo que hemos visto anteriormente en el EventBus, salvando la diferencia de que √©ste √∫ltimo tendr√° una relaci√≥n 1-N entre evento y subscriptores y, en el caso de Commands y Queries, la relaci√≥n ser√° siempre de 1-1 con sus respectivos CommandHandler/QueryHandler"
    },
    {
      type: "subtitle",
      content: "Clase InMemoryCommandBus:"
    },
    {
      type: "code",
      content: "@Service\npublic final class InMemoryCommandBus implements CommandBus {\n    private final CommandHandlersInformation information;\n    private final ApplicationContext         context;\n\n    // ...\n\n    @Override\n    public void dispatch(Command command) throws CommandHandlerExecutionError {\n        Class<? extends CommandHandler> commandHandlerClass = information.search(command.getClass());\n\n        CommandHandler handler = context.getBean(commandHandlerClass);\n\n        handler.handle(command);\n    }\n}"
    },
    {
      type: "text",
      content: "Al igual que hicimos para el mapeo de eventos/subscribers, la clase CommandHandlersInformation a trav√©s de reflexi√≥n escanear√° nuestro proyecto para identificar todos los CommandHandlers (las implementaciones que extiendan de esta interface) y, a partir de estos, el Command al que est√© conectado para obtener un mapeo de tipo <Command, CommandHandler>. Esta interface CommandHandler nos obliga por contrato a pasarle una clase gen√©rica que extienda de Command, que ser√° precisamente lo que nos permita hacer reflexi√≥n para mapear esta relaci√≥n üó∫. Del mismo modo que ve√≠amos en el caso de los eventos, todo este proceso se ejecutar√° en tiempo de compilaci√≥n para que una vez arrancado se pueda acceder a esta informaci√≥n cuando sea necesaria (Recordemos que al a√±adirle la anotaci√≥n @Service a la clase, nos la escanear√° al lanzar la aplicaci√≥n como un servicio inyectable)"
    },
    {
      type: "text",
      content: "A la hora de usarlo, lo que har√≠amos ser√≠a simplemente llamar al m√©todo dispatch() pas√°ndole el comando que queremos ejecutar, dentro del m√©todo lo primero que har√° ser√° recuperar del CommandHandlersInformation el CommandHandler asociado a dicho comando, obteniendo la instancia desde el ApplicationContext y, finalmente, llamar al handle() de dicho CommandHandler"
    },
    {
      type: "text",
      content: "Un detalle relevante en esta integraci√≥n es que la interface de CommandBus la encontraremos en la capa de Dominio de nuestra carpeta compartida, mientras que habr√° una instancia de √©sta por cada aplicaci√≥n que tengamos"
    },
    {
      type: "text",
      content: "Tambi√©n es importante tener en cuenta que aunque en este caso estamos hablando de un CommandBus en memoria s√≠ncrono (ser√≠a as√≠ en la mayor√≠a de los casos), tambi√©n podr√≠a darse el caso en que lo hici√©ramos de forma as√≠ncrona, elecci√≥n que podr√≠amos considerar por cuestiones de rendimiento pero que llevar√° algunas complejidades asociadas como es el manejo de posibles excepciones"
    },
    { type: "subtitle", content: "¬øAlguna Duda?" },
    {
      type: "text",
      content: "Si tienes alguna duda sobre el contenido del video o quieres compartir alguna sugerencia no dudes en abrir una nueva discusi√≥n m√°s abajo üëáüëáüëá"
    },
    {
      type: "text",
      content: "¬°Nos vemos en el siguiente video: ‚ôªÔ∏è Refactoring De Arquitectura Hexagonal a CQRS"
    }
  ],
};
